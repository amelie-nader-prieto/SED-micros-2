
sunset-lamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ac  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003944  08003944  00004944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003954  08003954  0000501c  2**0
                  CONTENTS
  4 .ARM          00000008  08003954  08003954  00004954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800395c  0800395c  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800395c  0800395c  0000495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003960  08003960  00004960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003964  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000001c  08003980  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003980  000050dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ba2  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a5  00000000  00000000  0000ebee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00010398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000819  00000000  00000000  00010e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016474  00000000  00000000  00011629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b82d  00000000  00000000  00027a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093cff  00000000  00000000  000332ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6fc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d4c  00000000  00000000  000c700c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c9d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800392c 	.word	0x0800392c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	0800392c 	.word	0x0800392c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__gedf2>:
 8000550:	f04f 3cff 	mov.w	ip, #4294967295
 8000554:	e006      	b.n	8000564 <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__ledf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	e002      	b.n	8000564 <__cmpdf2+0x4>
 800055e:	bf00      	nop

08000560 <__cmpdf2>:
 8000560:	f04f 0c01 	mov.w	ip, #1
 8000564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800056c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000574:	bf18      	it	ne
 8000576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800057a:	d01b      	beq.n	80005b4 <__cmpdf2+0x54>
 800057c:	b001      	add	sp, #4
 800057e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000582:	bf0c      	ite	eq
 8000584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000588:	ea91 0f03 	teqne	r1, r3
 800058c:	bf02      	ittt	eq
 800058e:	ea90 0f02 	teqeq	r0, r2
 8000592:	2000      	moveq	r0, #0
 8000594:	4770      	bxeq	lr
 8000596:	f110 0f00 	cmn.w	r0, #0
 800059a:	ea91 0f03 	teq	r1, r3
 800059e:	bf58      	it	pl
 80005a0:	4299      	cmppl	r1, r3
 80005a2:	bf08      	it	eq
 80005a4:	4290      	cmpeq	r0, r2
 80005a6:	bf2c      	ite	cs
 80005a8:	17d8      	asrcs	r0, r3, #31
 80005aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ae:	f040 0001 	orr.w	r0, r0, #1
 80005b2:	4770      	bx	lr
 80005b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d102      	bne.n	80005c4 <__cmpdf2+0x64>
 80005be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005c2:	d107      	bne.n	80005d4 <__cmpdf2+0x74>
 80005c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d1d6      	bne.n	800057c <__cmpdf2+0x1c>
 80005ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005d2:	d0d3      	beq.n	800057c <__cmpdf2+0x1c>
 80005d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__aeabi_cdrcmple>:
 80005dc:	4684      	mov	ip, r0
 80005de:	4610      	mov	r0, r2
 80005e0:	4662      	mov	r2, ip
 80005e2:	468c      	mov	ip, r1
 80005e4:	4619      	mov	r1, r3
 80005e6:	4663      	mov	r3, ip
 80005e8:	e000      	b.n	80005ec <__aeabi_cdcmpeq>
 80005ea:	bf00      	nop

080005ec <__aeabi_cdcmpeq>:
 80005ec:	b501      	push	{r0, lr}
 80005ee:	f7ff ffb7 	bl	8000560 <__cmpdf2>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	bf48      	it	mi
 80005f6:	f110 0f00 	cmnmi.w	r0, #0
 80005fa:	bd01      	pop	{r0, pc}

080005fc <__aeabi_dcmpeq>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff fff4 	bl	80005ec <__aeabi_cdcmpeq>
 8000604:	bf0c      	ite	eq
 8000606:	2001      	moveq	r0, #1
 8000608:	2000      	movne	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_dcmplt>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff ffea 	bl	80005ec <__aeabi_cdcmpeq>
 8000618:	bf34      	ite	cc
 800061a:	2001      	movcc	r0, #1
 800061c:	2000      	movcs	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmple>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffe0 	bl	80005ec <__aeabi_cdcmpeq>
 800062c:	bf94      	ite	ls
 800062e:	2001      	movls	r0, #1
 8000630:	2000      	movhi	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmpge>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffce 	bl	80005dc <__aeabi_cdrcmple>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpgt>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffc4 	bl	80005dc <__aeabi_cdrcmple>
 8000654:	bf34      	ite	cc
 8000656:	2001      	movcc	r0, #1
 8000658:	2000      	movcs	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_uldivmod>:
 8000660:	b953      	cbnz	r3, 8000678 <__aeabi_uldivmod+0x18>
 8000662:	b94a      	cbnz	r2, 8000678 <__aeabi_uldivmod+0x18>
 8000664:	2900      	cmp	r1, #0
 8000666:	bf08      	it	eq
 8000668:	2800      	cmpeq	r0, #0
 800066a:	bf1c      	itt	ne
 800066c:	f04f 31ff 	movne.w	r1, #4294967295
 8000670:	f04f 30ff 	movne.w	r0, #4294967295
 8000674:	f000 b96a 	b.w	800094c <__aeabi_idiv0>
 8000678:	f1ad 0c08 	sub.w	ip, sp, #8
 800067c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000680:	f000 f806 	bl	8000690 <__udivmoddi4>
 8000684:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800068c:	b004      	add	sp, #16
 800068e:	4770      	bx	lr

08000690 <__udivmoddi4>:
 8000690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000694:	9d08      	ldr	r5, [sp, #32]
 8000696:	460c      	mov	r4, r1
 8000698:	2b00      	cmp	r3, #0
 800069a:	d14e      	bne.n	800073a <__udivmoddi4+0xaa>
 800069c:	4694      	mov	ip, r2
 800069e:	458c      	cmp	ip, r1
 80006a0:	4686      	mov	lr, r0
 80006a2:	fab2 f282 	clz	r2, r2
 80006a6:	d962      	bls.n	800076e <__udivmoddi4+0xde>
 80006a8:	b14a      	cbz	r2, 80006be <__udivmoddi4+0x2e>
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	4091      	lsls	r1, r2
 80006b0:	fa20 f303 	lsr.w	r3, r0, r3
 80006b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80006b8:	4319      	orrs	r1, r3
 80006ba:	fa00 fe02 	lsl.w	lr, r0, r2
 80006be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006c2:	fa1f f68c 	uxth.w	r6, ip
 80006c6:	fbb1 f4f7 	udiv	r4, r1, r7
 80006ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006ce:	fb07 1114 	mls	r1, r7, r4, r1
 80006d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006d6:	fb04 f106 	mul.w	r1, r4, r6
 80006da:	4299      	cmp	r1, r3
 80006dc:	d90a      	bls.n	80006f4 <__udivmoddi4+0x64>
 80006de:	eb1c 0303 	adds.w	r3, ip, r3
 80006e2:	f104 30ff 	add.w	r0, r4, #4294967295
 80006e6:	f080 8112 	bcs.w	800090e <__udivmoddi4+0x27e>
 80006ea:	4299      	cmp	r1, r3
 80006ec:	f240 810f 	bls.w	800090e <__udivmoddi4+0x27e>
 80006f0:	3c02      	subs	r4, #2
 80006f2:	4463      	add	r3, ip
 80006f4:	1a59      	subs	r1, r3, r1
 80006f6:	fa1f f38e 	uxth.w	r3, lr
 80006fa:	fbb1 f0f7 	udiv	r0, r1, r7
 80006fe:	fb07 1110 	mls	r1, r7, r0, r1
 8000702:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000706:	fb00 f606 	mul.w	r6, r0, r6
 800070a:	429e      	cmp	r6, r3
 800070c:	d90a      	bls.n	8000724 <__udivmoddi4+0x94>
 800070e:	eb1c 0303 	adds.w	r3, ip, r3
 8000712:	f100 31ff 	add.w	r1, r0, #4294967295
 8000716:	f080 80fc 	bcs.w	8000912 <__udivmoddi4+0x282>
 800071a:	429e      	cmp	r6, r3
 800071c:	f240 80f9 	bls.w	8000912 <__udivmoddi4+0x282>
 8000720:	4463      	add	r3, ip
 8000722:	3802      	subs	r0, #2
 8000724:	1b9b      	subs	r3, r3, r6
 8000726:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800072a:	2100      	movs	r1, #0
 800072c:	b11d      	cbz	r5, 8000736 <__udivmoddi4+0xa6>
 800072e:	40d3      	lsrs	r3, r2
 8000730:	2200      	movs	r2, #0
 8000732:	e9c5 3200 	strd	r3, r2, [r5]
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	428b      	cmp	r3, r1
 800073c:	d905      	bls.n	800074a <__udivmoddi4+0xba>
 800073e:	b10d      	cbz	r5, 8000744 <__udivmoddi4+0xb4>
 8000740:	e9c5 0100 	strd	r0, r1, [r5]
 8000744:	2100      	movs	r1, #0
 8000746:	4608      	mov	r0, r1
 8000748:	e7f5      	b.n	8000736 <__udivmoddi4+0xa6>
 800074a:	fab3 f183 	clz	r1, r3
 800074e:	2900      	cmp	r1, #0
 8000750:	d146      	bne.n	80007e0 <__udivmoddi4+0x150>
 8000752:	42a3      	cmp	r3, r4
 8000754:	d302      	bcc.n	800075c <__udivmoddi4+0xcc>
 8000756:	4290      	cmp	r0, r2
 8000758:	f0c0 80f0 	bcc.w	800093c <__udivmoddi4+0x2ac>
 800075c:	1a86      	subs	r6, r0, r2
 800075e:	eb64 0303 	sbc.w	r3, r4, r3
 8000762:	2001      	movs	r0, #1
 8000764:	2d00      	cmp	r5, #0
 8000766:	d0e6      	beq.n	8000736 <__udivmoddi4+0xa6>
 8000768:	e9c5 6300 	strd	r6, r3, [r5]
 800076c:	e7e3      	b.n	8000736 <__udivmoddi4+0xa6>
 800076e:	2a00      	cmp	r2, #0
 8000770:	f040 8090 	bne.w	8000894 <__udivmoddi4+0x204>
 8000774:	eba1 040c 	sub.w	r4, r1, ip
 8000778:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800077c:	fa1f f78c 	uxth.w	r7, ip
 8000780:	2101      	movs	r1, #1
 8000782:	fbb4 f6f8 	udiv	r6, r4, r8
 8000786:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800078a:	fb08 4416 	mls	r4, r8, r6, r4
 800078e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000792:	fb07 f006 	mul.w	r0, r7, r6
 8000796:	4298      	cmp	r0, r3
 8000798:	d908      	bls.n	80007ac <__udivmoddi4+0x11c>
 800079a:	eb1c 0303 	adds.w	r3, ip, r3
 800079e:	f106 34ff 	add.w	r4, r6, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0x11a>
 80007a4:	4298      	cmp	r0, r3
 80007a6:	f200 80cd 	bhi.w	8000944 <__udivmoddi4+0x2b4>
 80007aa:	4626      	mov	r6, r4
 80007ac:	1a1c      	subs	r4, r3, r0
 80007ae:	fa1f f38e 	uxth.w	r3, lr
 80007b2:	fbb4 f0f8 	udiv	r0, r4, r8
 80007b6:	fb08 4410 	mls	r4, r8, r0, r4
 80007ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007be:	fb00 f707 	mul.w	r7, r0, r7
 80007c2:	429f      	cmp	r7, r3
 80007c4:	d908      	bls.n	80007d8 <__udivmoddi4+0x148>
 80007c6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ca:	f100 34ff 	add.w	r4, r0, #4294967295
 80007ce:	d202      	bcs.n	80007d6 <__udivmoddi4+0x146>
 80007d0:	429f      	cmp	r7, r3
 80007d2:	f200 80b0 	bhi.w	8000936 <__udivmoddi4+0x2a6>
 80007d6:	4620      	mov	r0, r4
 80007d8:	1bdb      	subs	r3, r3, r7
 80007da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007de:	e7a5      	b.n	800072c <__udivmoddi4+0x9c>
 80007e0:	f1c1 0620 	rsb	r6, r1, #32
 80007e4:	408b      	lsls	r3, r1
 80007e6:	fa22 f706 	lsr.w	r7, r2, r6
 80007ea:	431f      	orrs	r7, r3
 80007ec:	fa20 fc06 	lsr.w	ip, r0, r6
 80007f0:	fa04 f301 	lsl.w	r3, r4, r1
 80007f4:	ea43 030c 	orr.w	r3, r3, ip
 80007f8:	40f4      	lsrs	r4, r6
 80007fa:	fa00 f801 	lsl.w	r8, r0, r1
 80007fe:	0c38      	lsrs	r0, r7, #16
 8000800:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000804:	fbb4 fef0 	udiv	lr, r4, r0
 8000808:	fa1f fc87 	uxth.w	ip, r7
 800080c:	fb00 441e 	mls	r4, r0, lr, r4
 8000810:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000814:	fb0e f90c 	mul.w	r9, lr, ip
 8000818:	45a1      	cmp	r9, r4
 800081a:	fa02 f201 	lsl.w	r2, r2, r1
 800081e:	d90a      	bls.n	8000836 <__udivmoddi4+0x1a6>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000826:	f080 8084 	bcs.w	8000932 <__udivmoddi4+0x2a2>
 800082a:	45a1      	cmp	r9, r4
 800082c:	f240 8081 	bls.w	8000932 <__udivmoddi4+0x2a2>
 8000830:	f1ae 0e02 	sub.w	lr, lr, #2
 8000834:	443c      	add	r4, r7
 8000836:	eba4 0409 	sub.w	r4, r4, r9
 800083a:	fa1f f983 	uxth.w	r9, r3
 800083e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000842:	fb00 4413 	mls	r4, r0, r3, r4
 8000846:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800084a:	fb03 fc0c 	mul.w	ip, r3, ip
 800084e:	45a4      	cmp	ip, r4
 8000850:	d907      	bls.n	8000862 <__udivmoddi4+0x1d2>
 8000852:	193c      	adds	r4, r7, r4
 8000854:	f103 30ff 	add.w	r0, r3, #4294967295
 8000858:	d267      	bcs.n	800092a <__udivmoddi4+0x29a>
 800085a:	45a4      	cmp	ip, r4
 800085c:	d965      	bls.n	800092a <__udivmoddi4+0x29a>
 800085e:	3b02      	subs	r3, #2
 8000860:	443c      	add	r4, r7
 8000862:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000866:	fba0 9302 	umull	r9, r3, r0, r2
 800086a:	eba4 040c 	sub.w	r4, r4, ip
 800086e:	429c      	cmp	r4, r3
 8000870:	46ce      	mov	lr, r9
 8000872:	469c      	mov	ip, r3
 8000874:	d351      	bcc.n	800091a <__udivmoddi4+0x28a>
 8000876:	d04e      	beq.n	8000916 <__udivmoddi4+0x286>
 8000878:	b155      	cbz	r5, 8000890 <__udivmoddi4+0x200>
 800087a:	ebb8 030e 	subs.w	r3, r8, lr
 800087e:	eb64 040c 	sbc.w	r4, r4, ip
 8000882:	fa04 f606 	lsl.w	r6, r4, r6
 8000886:	40cb      	lsrs	r3, r1
 8000888:	431e      	orrs	r6, r3
 800088a:	40cc      	lsrs	r4, r1
 800088c:	e9c5 6400 	strd	r6, r4, [r5]
 8000890:	2100      	movs	r1, #0
 8000892:	e750      	b.n	8000736 <__udivmoddi4+0xa6>
 8000894:	f1c2 0320 	rsb	r3, r2, #32
 8000898:	fa20 f103 	lsr.w	r1, r0, r3
 800089c:	fa0c fc02 	lsl.w	ip, ip, r2
 80008a0:	fa24 f303 	lsr.w	r3, r4, r3
 80008a4:	4094      	lsls	r4, r2
 80008a6:	430c      	orrs	r4, r1
 80008a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80008b0:	fa1f f78c 	uxth.w	r7, ip
 80008b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b8:	fb08 3110 	mls	r1, r8, r0, r3
 80008bc:	0c23      	lsrs	r3, r4, #16
 80008be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c2:	fb00 f107 	mul.w	r1, r0, r7
 80008c6:	4299      	cmp	r1, r3
 80008c8:	d908      	bls.n	80008dc <__udivmoddi4+0x24c>
 80008ca:	eb1c 0303 	adds.w	r3, ip, r3
 80008ce:	f100 36ff 	add.w	r6, r0, #4294967295
 80008d2:	d22c      	bcs.n	800092e <__udivmoddi4+0x29e>
 80008d4:	4299      	cmp	r1, r3
 80008d6:	d92a      	bls.n	800092e <__udivmoddi4+0x29e>
 80008d8:	3802      	subs	r0, #2
 80008da:	4463      	add	r3, ip
 80008dc:	1a5b      	subs	r3, r3, r1
 80008de:	b2a4      	uxth	r4, r4
 80008e0:	fbb3 f1f8 	udiv	r1, r3, r8
 80008e4:	fb08 3311 	mls	r3, r8, r1, r3
 80008e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008ec:	fb01 f307 	mul.w	r3, r1, r7
 80008f0:	42a3      	cmp	r3, r4
 80008f2:	d908      	bls.n	8000906 <__udivmoddi4+0x276>
 80008f4:	eb1c 0404 	adds.w	r4, ip, r4
 80008f8:	f101 36ff 	add.w	r6, r1, #4294967295
 80008fc:	d213      	bcs.n	8000926 <__udivmoddi4+0x296>
 80008fe:	42a3      	cmp	r3, r4
 8000900:	d911      	bls.n	8000926 <__udivmoddi4+0x296>
 8000902:	3902      	subs	r1, #2
 8000904:	4464      	add	r4, ip
 8000906:	1ae4      	subs	r4, r4, r3
 8000908:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800090c:	e739      	b.n	8000782 <__udivmoddi4+0xf2>
 800090e:	4604      	mov	r4, r0
 8000910:	e6f0      	b.n	80006f4 <__udivmoddi4+0x64>
 8000912:	4608      	mov	r0, r1
 8000914:	e706      	b.n	8000724 <__udivmoddi4+0x94>
 8000916:	45c8      	cmp	r8, r9
 8000918:	d2ae      	bcs.n	8000878 <__udivmoddi4+0x1e8>
 800091a:	ebb9 0e02 	subs.w	lr, r9, r2
 800091e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000922:	3801      	subs	r0, #1
 8000924:	e7a8      	b.n	8000878 <__udivmoddi4+0x1e8>
 8000926:	4631      	mov	r1, r6
 8000928:	e7ed      	b.n	8000906 <__udivmoddi4+0x276>
 800092a:	4603      	mov	r3, r0
 800092c:	e799      	b.n	8000862 <__udivmoddi4+0x1d2>
 800092e:	4630      	mov	r0, r6
 8000930:	e7d4      	b.n	80008dc <__udivmoddi4+0x24c>
 8000932:	46d6      	mov	lr, sl
 8000934:	e77f      	b.n	8000836 <__udivmoddi4+0x1a6>
 8000936:	4463      	add	r3, ip
 8000938:	3802      	subs	r0, #2
 800093a:	e74d      	b.n	80007d8 <__udivmoddi4+0x148>
 800093c:	4606      	mov	r6, r0
 800093e:	4623      	mov	r3, r4
 8000940:	4608      	mov	r0, r1
 8000942:	e70f      	b.n	8000764 <__udivmoddi4+0xd4>
 8000944:	3e02      	subs	r6, #2
 8000946:	4463      	add	r3, ip
 8000948:	e730      	b.n	80007ac <__udivmoddi4+0x11c>
 800094a:	bf00      	nop

0800094c <__aeabi_idiv0>:
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <scale>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
uint32_t scale(uint32_t raw){
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	return (uint32_t)((raw*MAX_PWM))/MAX_ADC;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800095e:	fb03 f202 	mul.w	r2, r3, r2
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <scale+0x2c>)
 8000964:	fba3 1302 	umull	r1, r3, r3, r2
 8000968:	1ad2      	subs	r2, r2, r3
 800096a:	0852      	lsrs	r2, r2, #1
 800096c:	4413      	add	r3, r2
 800096e:	0adb      	lsrs	r3, r3, #11
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	00100101 	.word	0x00100101

08000980 <leer_adc>:
uint32_t leer_adc(ADC_HandleTypeDef* _hadc){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start(_hadc);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 fe87 	bl	800169c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(_hadc, 100) == HAL_OK){
 800098e:	2164      	movs	r1, #100	@ 0x64
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 ff6a 	bl	800186a <HAL_ADC_PollForConversion>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d104      	bne.n	80009a6 <leer_adc+0x26>
		return HAL_ADC_GetValue(_hadc);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f000 ffef 	bl	8001980 <HAL_ADC_GetValue>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e004      	b.n	80009b0 <leer_adc+0x30>
		uint32_t raw = HAL_ADC_GetValue(_hadc);
		HAL_ADC_Stop(_hadc);
		return raw;
	}
	HAL_ADC_Stop(_hadc);
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f000 ff2c 	bl	8001804 <HAL_ADC_Stop>
	return -1;
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295

}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <ajuste_brillo>:

void ajuste_brillo(){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	/* Leemos el ADC por polling y calculamos el factor */
	pot1_raw = leer_adc(&hadc1);
 80009bc:	4822      	ldr	r0, [pc, #136]	@ (8000a48 <ajuste_brillo+0x90>)
 80009be:	f7ff ffdf 	bl	8000980 <leer_adc>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a21      	ldr	r2, [pc, #132]	@ (8000a4c <ajuste_brillo+0x94>)
 80009c6:	6013      	str	r3, [r2, #0]
	pot1_scale = scale(pot1_raw);
 80009c8:	4b20      	ldr	r3, [pc, #128]	@ (8000a4c <ajuste_brillo+0x94>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ffbf 	bl	8000950 <scale>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a50 <ajuste_brillo+0x98>)
 80009d6:	6013      	str	r3, [r2, #0]
	factor_brillo = (float)pot1_scale / MAX_PWM;
 80009d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a50 <ajuste_brillo+0x98>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	ee07 3a90 	vmov	s15, r3
 80009e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009e4:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8000a54 <ajuste_brillo+0x9c>
 80009e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <ajuste_brillo+0xa0>)
 80009ee:	edc3 7a00 	vstr	s15, [r3]
	/* Para que no se salga del intervalo */
	if(factor_brillo < factor_brillo_min) factor_brillo = factor_brillo_min;
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <ajuste_brillo+0xa0>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fd52 	bl	80004a0 <__aeabi_f2d>
 80009fc:	a30e      	add	r3, pc, #56	@ (adr r3, 8000a38 <ajuste_brillo+0x80>)
 80009fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a02:	f7ff fe05 	bl	8000610 <__aeabi_dcmplt>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <ajuste_brillo+0x5a>
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <ajuste_brillo+0xa0>)
 8000a0e:	4a13      	ldr	r2, [pc, #76]	@ (8000a5c <ajuste_brillo+0xa4>)
 8000a10:	601a      	str	r2, [r3, #0]
	if(factor_brillo > factor_brillo_max) factor_brillo = factor_brillo_max;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <ajuste_brillo+0xa0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fd42 	bl	80004a0 <__aeabi_f2d>
 8000a1c:	a308      	add	r3, pc, #32	@ (adr r3, 8000a40 <ajuste_brillo+0x88>)
 8000a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a22:	f7ff fe13 	bl	800064c <__aeabi_dcmpgt>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d100      	bne.n	8000a2e <ajuste_brillo+0x76>
}
 8000a2c:	e002      	b.n	8000a34 <ajuste_brillo+0x7c>
	if(factor_brillo > factor_brillo_max) factor_brillo = factor_brillo_max;
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <ajuste_brillo+0xa0>)
 8000a30:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <ajuste_brillo+0xa8>)
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	9999999a 	.word	0x9999999a
 8000a3c:	3fb99999 	.word	0x3fb99999
 8000a40:	cccccccd 	.word	0xcccccccd
 8000a44:	3feccccc 	.word	0x3feccccc
 8000a48:	20000038 	.word	0x20000038
 8000a4c:	200000cc 	.word	0x200000cc
 8000a50:	200000d0 	.word	0x200000d0
 8000a54:	4479c000 	.word	0x4479c000
 8000a58:	200000d4 	.word	0x200000d4
 8000a5c:	3dcccccd 	.word	0x3dcccccd
 8000a60:	3f666666 	.word	0x3f666666

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a68:	f000 fd62 	bl	8001530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6c:	f000 f9f6 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a70:	f000 fb66 	bl	8001140 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a74:	f000 faac 	bl	8000fd0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000a78:	f000 fa58 	bl	8000f2c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_PWM_Init(&htim1);
  HAL_TIM_PWM_Start(&htim1, CANAL_R);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	48a0      	ldr	r0, [pc, #640]	@ (8000d00 <main+0x29c>)
 8000a80:	f002 f95c 	bl	8002d3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, CANAL_G);
 8000a84:	2104      	movs	r1, #4
 8000a86:	489e      	ldr	r0, [pc, #632]	@ (8000d00 <main+0x29c>)
 8000a88:	f002 f958 	bl	8002d3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, CANAL_B);
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	489c      	ldr	r0, [pc, #624]	@ (8000d00 <main+0x29c>)
 8000a90:	f002 f954 	bl	8002d3c <HAL_TIM_PWM_Start>
  __HAL_TIM_MOE_ENABLE(&htim1);
 8000a94:	4b9a      	ldr	r3, [pc, #616]	@ (8000d00 <main+0x29c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a9a:	4b99      	ldr	r3, [pc, #612]	@ (8000d00 <main+0x29c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000aa2:	645a      	str	r2, [r3, #68]	@ 0x44

  HAL_ADC_Start(&hadc1);
 8000aa4:	4897      	ldr	r0, [pc, #604]	@ (8000d04 <main+0x2a0>)
 8000aa6:	f000 fdf9 	bl	800169c <HAL_ADC_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  /* Actualización del estado en función de las entradas */
	  switch(entrada){
 8000aaa:	4b97      	ldr	r3, [pc, #604]	@ (8000d08 <main+0x2a4>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b0e      	cmp	r3, #14
 8000ab2:	f200 8121 	bhi.w	8000cf8 <main+0x294>
 8000ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8000abc <main+0x58>)
 8000ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abc:	08000d15 	.word	0x08000d15
 8000ac0:	08000af9 	.word	0x08000af9
 8000ac4:	08000b19 	.word	0x08000b19
 8000ac8:	08000b41 	.word	0x08000b41
 8000acc:	08000b69 	.word	0x08000b69
 8000ad0:	08000b91 	.word	0x08000b91
 8000ad4:	08000bb9 	.word	0x08000bb9
 8000ad8:	08000be1 	.word	0x08000be1
 8000adc:	08000c09 	.word	0x08000c09
 8000ae0:	08000c31 	.word	0x08000c31
 8000ae4:	08000c59 	.word	0x08000c59
 8000ae8:	08000c81 	.word	0x08000c81
 8000aec:	08000ca9 	.word	0x08000ca9
 8000af0:	08000cc9 	.word	0x08000cc9
 8000af4:	08000ce1 	.word	0x08000ce1
	  case EVENT_NONE:break;

	  case EVENT_ONOFF:
		  if(modo == OFF) modo = NORMAL;
 8000af8:	4b84      	ldr	r3, [pc, #528]	@ (8000d0c <main+0x2a8>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d103      	bne.n	8000b0a <main+0xa6>
 8000b02:	4b82      	ldr	r3, [pc, #520]	@ (8000d0c <main+0x2a8>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e002      	b.n	8000b10 <main+0xac>
		  else modo = OFF;
 8000b0a:	4b80      	ldr	r3, [pc, #512]	@ (8000d0c <main+0x2a8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		  entrada = EVENT_NONE;
 8000b10:	4b7d      	ldr	r3, [pc, #500]	@ (8000d08 <main+0x2a4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		  break;
 8000b16:	e0fe      	b.n	8000d16 <main+0x2b2>

	  case EVENT_R:
		  if(modo == CICLO) modo = NORMAL;
 8000b18:	4b7c      	ldr	r3, [pc, #496]	@ (8000d0c <main+0x2a8>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d102      	bne.n	8000b28 <main+0xc4>
 8000b22:	4b7a      	ldr	r3, [pc, #488]	@ (8000d0c <main+0x2a8>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
		  if(modo == NORMAL) sub_modo = NORMAL_R;
 8000b28:	4b78      	ldr	r3, [pc, #480]	@ (8000d0c <main+0x2a8>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d102      	bne.n	8000b38 <main+0xd4>
 8000b32:	4b77      	ldr	r3, [pc, #476]	@ (8000d10 <main+0x2ac>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
		  entrada = EVENT_NONE;
 8000b38:	4b73      	ldr	r3, [pc, #460]	@ (8000d08 <main+0x2a4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
		  break;
 8000b3e:	e0ea      	b.n	8000d16 <main+0x2b2>

	  case EVENT_G:
		  if(modo == CICLO) modo = NORMAL;
 8000b40:	4b72      	ldr	r3, [pc, #456]	@ (8000d0c <main+0x2a8>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d102      	bne.n	8000b50 <main+0xec>
 8000b4a:	4b70      	ldr	r3, [pc, #448]	@ (8000d0c <main+0x2a8>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
		  if(modo == NORMAL) sub_modo = NORMAL_G;
 8000b50:	4b6e      	ldr	r3, [pc, #440]	@ (8000d0c <main+0x2a8>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d102      	bne.n	8000b60 <main+0xfc>
 8000b5a:	4b6d      	ldr	r3, [pc, #436]	@ (8000d10 <main+0x2ac>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]
		  entrada = EVENT_NONE;
 8000b60:	4b69      	ldr	r3, [pc, #420]	@ (8000d08 <main+0x2a4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		  break;
 8000b66:	e0d6      	b.n	8000d16 <main+0x2b2>

	  case EVENT_B:
		  if(modo == CICLO) modo = NORMAL;
 8000b68:	4b68      	ldr	r3, [pc, #416]	@ (8000d0c <main+0x2a8>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d102      	bne.n	8000b78 <main+0x114>
 8000b72:	4b66      	ldr	r3, [pc, #408]	@ (8000d0c <main+0x2a8>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
		  if(modo == NORMAL) sub_modo = NORMAL_B;
 8000b78:	4b64      	ldr	r3, [pc, #400]	@ (8000d0c <main+0x2a8>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d102      	bne.n	8000b88 <main+0x124>
 8000b82:	4b63      	ldr	r3, [pc, #396]	@ (8000d10 <main+0x2ac>)
 8000b84:	2202      	movs	r2, #2
 8000b86:	701a      	strb	r2, [r3, #0]
		  entrada = EVENT_NONE;
 8000b88:	4b5f      	ldr	r3, [pc, #380]	@ (8000d08 <main+0x2a4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
		  break;
 8000b8e:	e0c2      	b.n	8000d16 <main+0x2b2>

	  case EVENT_W:
		  if(modo == CICLO) modo = NORMAL;
 8000b90:	4b5e      	ldr	r3, [pc, #376]	@ (8000d0c <main+0x2a8>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d102      	bne.n	8000ba0 <main+0x13c>
 8000b9a:	4b5c      	ldr	r3, [pc, #368]	@ (8000d0c <main+0x2a8>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
		  if(modo == NORMAL) sub_modo = NORMAL_W;
 8000ba0:	4b5a      	ldr	r3, [pc, #360]	@ (8000d0c <main+0x2a8>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d102      	bne.n	8000bb0 <main+0x14c>
 8000baa:	4b59      	ldr	r3, [pc, #356]	@ (8000d10 <main+0x2ac>)
 8000bac:	2203      	movs	r2, #3
 8000bae:	701a      	strb	r2, [r3, #0]
		  entrada = EVENT_NONE;
 8000bb0:	4b55      	ldr	r3, [pc, #340]	@ (8000d08 <main+0x2a4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
		  break;
 8000bb6:	e0ae      	b.n	8000d16 <main+0x2b2>

	  case EVENT_1:
		  if(modo == CICLO) modo = NORMAL;
 8000bb8:	4b54      	ldr	r3, [pc, #336]	@ (8000d0c <main+0x2a8>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d102      	bne.n	8000bc8 <main+0x164>
 8000bc2:	4b52      	ldr	r3, [pc, #328]	@ (8000d0c <main+0x2a8>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
		  if(modo == NORMAL) sub_modo = NORMAL_1;
 8000bc8:	4b50      	ldr	r3, [pc, #320]	@ (8000d0c <main+0x2a8>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d102      	bne.n	8000bd8 <main+0x174>
 8000bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8000d10 <main+0x2ac>)
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	701a      	strb	r2, [r3, #0]
		  entrada = EVENT_NONE;
 8000bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8000d08 <main+0x2a4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
		  break;
 8000bde:	e09a      	b.n	8000d16 <main+0x2b2>

	  case EVENT_2:
		  if(modo == CICLO) modo = NORMAL;
 8000be0:	4b4a      	ldr	r3, [pc, #296]	@ (8000d0c <main+0x2a8>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d102      	bne.n	8000bf0 <main+0x18c>
 8000bea:	4b48      	ldr	r3, [pc, #288]	@ (8000d0c <main+0x2a8>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
		  if(modo == NORMAL) sub_modo = NORMAL_2;
 8000bf0:	4b46      	ldr	r3, [pc, #280]	@ (8000d0c <main+0x2a8>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d102      	bne.n	8000c00 <main+0x19c>
 8000bfa:	4b45      	ldr	r3, [pc, #276]	@ (8000d10 <main+0x2ac>)
 8000bfc:	2205      	movs	r2, #5
 8000bfe:	701a      	strb	r2, [r3, #0]
		  entrada = EVENT_NONE;
 8000c00:	4b41      	ldr	r3, [pc, #260]	@ (8000d08 <main+0x2a4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		  break;
 8000c06:	e086      	b.n	8000d16 <main+0x2b2>

	  case EVENT_3:
		  if(modo == CICLO) modo = NORMAL;
 8000c08:	4b40      	ldr	r3, [pc, #256]	@ (8000d0c <main+0x2a8>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d102      	bne.n	8000c18 <main+0x1b4>
 8000c12:	4b3e      	ldr	r3, [pc, #248]	@ (8000d0c <main+0x2a8>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
		  if(modo == NORMAL) sub_modo = NORMAL_3;
 8000c18:	4b3c      	ldr	r3, [pc, #240]	@ (8000d0c <main+0x2a8>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d102      	bne.n	8000c28 <main+0x1c4>
 8000c22:	4b3b      	ldr	r3, [pc, #236]	@ (8000d10 <main+0x2ac>)
 8000c24:	2206      	movs	r2, #6
 8000c26:	701a      	strb	r2, [r3, #0]
		  entrada = EVENT_NONE;
 8000c28:	4b37      	ldr	r3, [pc, #220]	@ (8000d08 <main+0x2a4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
		  break;
 8000c2e:	e072      	b.n	8000d16 <main+0x2b2>

	  case EVENT_CICLO1:
		  if(modo == NORMAL) modo = CICLO;
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <main+0x2a8>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d102      	bne.n	8000c40 <main+0x1dc>
 8000c3a:	4b34      	ldr	r3, [pc, #208]	@ (8000d0c <main+0x2a8>)
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	701a      	strb	r2, [r3, #0]
		  if(modo == CICLO) sub_modo = CICLO_1;
 8000c40:	4b32      	ldr	r3, [pc, #200]	@ (8000d0c <main+0x2a8>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d102      	bne.n	8000c50 <main+0x1ec>
 8000c4a:	4b31      	ldr	r3, [pc, #196]	@ (8000d10 <main+0x2ac>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	701a      	strb	r2, [r3, #0]
		  entrada = EVENT_NONE;
 8000c50:	4b2d      	ldr	r3, [pc, #180]	@ (8000d08 <main+0x2a4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
		  break;
 8000c56:	e05e      	b.n	8000d16 <main+0x2b2>

	  case EVENT_CICLO2:
		  if(modo == NORMAL) modo = CICLO;
 8000c58:	4b2c      	ldr	r3, [pc, #176]	@ (8000d0c <main+0x2a8>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d102      	bne.n	8000c68 <main+0x204>
 8000c62:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <main+0x2a8>)
 8000c64:	2202      	movs	r2, #2
 8000c66:	701a      	strb	r2, [r3, #0]
		  if(modo == CICLO) sub_modo = CICLO_2;
 8000c68:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <main+0x2a8>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d102      	bne.n	8000c78 <main+0x214>
 8000c72:	4b27      	ldr	r3, [pc, #156]	@ (8000d10 <main+0x2ac>)
 8000c74:	2208      	movs	r2, #8
 8000c76:	701a      	strb	r2, [r3, #0]
		  entrada = EVENT_NONE;
 8000c78:	4b23      	ldr	r3, [pc, #140]	@ (8000d08 <main+0x2a4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
		  break;
 8000c7e:	e04a      	b.n	8000d16 <main+0x2b2>

	  case EVENT_CICLO3:
		  if(modo == NORMAL) modo = CICLO;
 8000c80:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <main+0x2a8>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d102      	bne.n	8000c90 <main+0x22c>
 8000c8a:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <main+0x2a8>)
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	701a      	strb	r2, [r3, #0]
		  if(modo == CICLO) sub_modo = CICLO_3;
 8000c90:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <main+0x2a8>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d102      	bne.n	8000ca0 <main+0x23c>
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <main+0x2ac>)
 8000c9c:	2209      	movs	r2, #9
 8000c9e:	701a      	strb	r2, [r3, #0]
		  entrada = EVENT_NONE;
 8000ca0:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <main+0x2a4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
		  break;
 8000ca6:	e036      	b.n	8000d16 <main+0x2b2>

	  case EVENT_MODO_AHORRO:
		  if(modo == NORMAL) modo = AHORRO;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <main+0x2a8>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d103      	bne.n	8000cba <main+0x256>
 8000cb2:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <main+0x2a8>)
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	e002      	b.n	8000cc0 <main+0x25c>
		  else modo = NORMAL;
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <main+0x2a8>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
		  entrada = EVENT_NONE;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <main+0x2a4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
		  break;
 8000cc6:	e026      	b.n	8000d16 <main+0x2b2>

	  case EVENT_CONFIG_COLOR:
		  if(modo == NORMAL) modo = CONFIG_COLOR;
 8000cc8:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <main+0x2a8>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d102      	bne.n	8000cd8 <main+0x274>
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <main+0x2a8>)
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	701a      	strb	r2, [r3, #0]
		  entrada = EVENT_NONE;
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <main+0x2a4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
		  break;
 8000cde:	e01a      	b.n	8000d16 <main+0x2b2>

	  case EVENT_SAVE_COLOR:
		  if(modo == CONFIG_COLOR) modo = NORMAL;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <main+0x2a8>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d102      	bne.n	8000cf0 <main+0x28c>
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <main+0x2a8>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
		  entrada = EVENT_NONE;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <main+0x2a4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
		  break;
 8000cf6:	e00e      	b.n	8000d16 <main+0x2b2>

	  default:
		  entrada = EVENT_NONE;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <main+0x2a4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
		  break;
 8000cfe:	e00a      	b.n	8000d16 <main+0x2b2>
 8000d00:	20000080 	.word	0x20000080
 8000d04:	20000038 	.word	0x20000038
 8000d08:	200000c8 	.word	0x200000c8
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000001 	.word	0x20000001
	  case EVENT_NONE:break;
 8000d14:	bf00      	nop
	  }

	  /* Actualización de las salidas en función del estado */
	  switch(modo){
 8000d16:	4b4a      	ldr	r3, [pc, #296]	@ (8000e40 <main+0x3dc>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d857      	bhi.n	8000dd0 <main+0x36c>
 8000d20:	a201      	add	r2, pc, #4	@ (adr r2, 8000d28 <main+0x2c4>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000d3d 	.word	0x08000d3d
 8000d2c:	08000d51 	.word	0x08000d51
 8000d30:	08000d9f 	.word	0x08000d9f
 8000d34:	08000dc5 	.word	0x08000dc5
 8000d38:	08000dcb 	.word	0x08000dcb
	  case OFF:
		  // poner todos los canales a 0 (luz apagada)
		  brillo_R = 0;
 8000d3c:	4b41      	ldr	r3, [pc, #260]	@ (8000e44 <main+0x3e0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
		  brillo_G = 0;
 8000d42:	4b41      	ldr	r3, [pc, #260]	@ (8000e48 <main+0x3e4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
		  brillo_B = 0;
 8000d48:	4b40      	ldr	r3, [pc, #256]	@ (8000e4c <main+0x3e8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]

		  break;
 8000d4e:	e040      	b.n	8000dd2 <main+0x36e>

	  case NORMAL:
		  switch(sub_modo){
 8000d50:	4b3f      	ldr	r3, [pc, #252]	@ (8000e50 <main+0x3ec>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d810      	bhi.n	8000d7c <main+0x318>
 8000d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d60 <main+0x2fc>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000d97 	.word	0x08000d97
 8000d64:	08000d97 	.word	0x08000d97
 8000d68:	08000d97 	.word	0x08000d97
 8000d6c:	08000d97 	.word	0x08000d97
 8000d70:	08000d97 	.word	0x08000d97
 8000d74:	08000d97 	.word	0x08000d97
 8000d78:	08000d97 	.word	0x08000d97
			  break;
		  case NORMAL_3:
			  // asignar valores RGB del color personalizado 3
			  break;
		  default:
			  brillo_R = 666;
 8000d7c:	4b31      	ldr	r3, [pc, #196]	@ (8000e44 <main+0x3e0>)
 8000d7e:	f240 229a 	movw	r2, #666	@ 0x29a
 8000d82:	601a      	str	r2, [r3, #0]
			  brillo_G = 666;
 8000d84:	4b30      	ldr	r3, [pc, #192]	@ (8000e48 <main+0x3e4>)
 8000d86:	f240 229a 	movw	r2, #666	@ 0x29a
 8000d8a:	601a      	str	r2, [r3, #0]
			  brillo_B = 666;
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e4c <main+0x3e8>)
 8000d8e:	f240 229a 	movw	r2, #666	@ 0x29a
 8000d92:	601a      	str	r2, [r3, #0]
			  break;
 8000d94:	e000      	b.n	8000d98 <main+0x334>
			  break;
 8000d96:	bf00      	nop
		  }

		  /* Ajuste del brillo */
		  ajuste_brillo();
 8000d98:	f7ff fe0e 	bl	80009b8 <ajuste_brillo>

		  break;
 8000d9c:	e019      	b.n	8000dd2 <main+0x36e>

	  case CICLO:
		  switch(sub_modo){
 8000d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e50 <main+0x3ec>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b09      	cmp	r3, #9
 8000da6:	d005      	beq.n	8000db4 <main+0x350>
 8000da8:	2b09      	cmp	r3, #9
 8000daa:	dc05      	bgt.n	8000db8 <main+0x354>
 8000dac:	2b07      	cmp	r3, #7
 8000dae:	d005      	beq.n	8000dbc <main+0x358>
 8000db0:	2b08      	cmp	r3, #8
		  case CICLO_1:
			  // llamar a la función del ciclo 1 (modo arcoíris)
			  break;
		  case CICLO_2:
			  // llamar a la función del ciclo 2 (modo discoteca)
			  break;
 8000db2:	e004      	b.n	8000dbe <main+0x35a>
		  case CICLO_3:
			  // llamar a la función del ciclo 3 (modo fuego)
			  break;
 8000db4:	bf00      	nop
 8000db6:	e002      	b.n	8000dbe <main+0x35a>
		  default:break;
 8000db8:	bf00      	nop
 8000dba:	e000      	b.n	8000dbe <main+0x35a>
			  break;
 8000dbc:	bf00      	nop
		  }

		  /* Ajuste del brillo */
		  ajuste_brillo();
 8000dbe:	f7ff fdfb 	bl	80009b8 <ajuste_brillo>

		  break;
 8000dc2:	e006      	b.n	8000dd2 <main+0x36e>

	  case AHORRO:
		  // llamar a la función del modo ahorro

		  /* Ajuste del brillo */
		  ajuste_brillo();
 8000dc4:	f7ff fdf8 	bl	80009b8 <ajuste_brillo>

		  break;
 8000dc8:	e003      	b.n	8000dd2 <main+0x36e>
		  // llamar a la función de configuración del color
		  // leer potenciómetros para ajustar el color
		  // guardar los valores RGB en memoria

		  /* Ajute del brillo */
		  ajuste_brillo();
 8000dca:	f7ff fdf5 	bl	80009b8 <ajuste_brillo>

		  break;
 8000dce:	e000      	b.n	8000dd2 <main+0x36e>

	  default:break;
 8000dd0:	bf00      	nop
	  }

	  //ajuste_brillo();

	  __HAL_TIM_SET_COMPARE(&htim1,CANAL_R,brillo_R*factor_brillo);
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <main+0x3e0>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dde:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <main+0x3f0>)
 8000de0:	edd3 7a00 	vldr	s15, [r3]
 8000de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <main+0x3f4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df0:	ee17 2a90 	vmov	r2, s15
 8000df4:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,CANAL_G,brillo_G*factor_brillo);
 8000df6:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <main+0x3e4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e02:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <main+0x3f0>)
 8000e04:	edd3 7a00 	vldr	s15, [r3]
 8000e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <main+0x3f4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e14:	ee17 2a90 	vmov	r2, s15
 8000e18:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,CANAL_B,brillo_B*factor_brillo);
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <main+0x3e8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	ee07 3a90 	vmov	s15, r3
 8000e22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e26:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <main+0x3f0>)
 8000e28:	edd3 7a00 	vldr	s15, [r3]
 8000e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e30:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <main+0x3f4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e38:	ee17 2a90 	vmov	r2, s15
 8000e3c:	63da      	str	r2, [r3, #60]	@ 0x3c
	  switch(entrada){
 8000e3e:	e634      	b.n	8000aaa <main+0x46>
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000004 	.word	0x20000004
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	2000000c 	.word	0x2000000c
 8000e50:	20000001 	.word	0x20000001
 8000e54:	200000d4 	.word	0x200000d4
 8000e58:	20000080 	.word	0x20000080

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b094      	sub	sp, #80	@ 0x50
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0320 	add.w	r3, r7, #32
 8000e66:	2230      	movs	r2, #48	@ 0x30
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fd32 	bl	80038d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	4b27      	ldr	r3, [pc, #156]	@ (8000f24 <SystemClock_Config+0xc8>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e88:	4a26      	ldr	r2, [pc, #152]	@ (8000f24 <SystemClock_Config+0xc8>)
 8000e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e90:	4b24      	ldr	r3, [pc, #144]	@ (8000f24 <SystemClock_Config+0xc8>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <SystemClock_Config+0xcc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a20      	ldr	r2, [pc, #128]	@ (8000f28 <SystemClock_Config+0xcc>)
 8000ea6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b1e      	ldr	r3, [pc, #120]	@ (8000f28 <SystemClock_Config+0xcc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec0:	2310      	movs	r3, #16
 8000ec2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ed0:	2332      	movs	r3, #50	@ 0x32
 8000ed2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000edc:	f107 0320 	add.w	r3, r7, #32
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 fa1f 	bl	8002324 <HAL_RCC_OscConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000eec:	f000 f9e6 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000efc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f001 fc81 	bl	8002814 <HAL_RCC_ClockConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f18:	f000 f9d0 	bl	80012bc <Error_Handler>
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	3750      	adds	r7, #80	@ 0x50
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40007000 	.word	0x40007000

08000f2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	@ (8000fc4 <MX_ADC1_Init+0x98>)
 8000f40:	4a21      	ldr	r2, [pc, #132]	@ (8000fc8 <MX_ADC1_Init+0x9c>)
 8000f42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f44:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <MX_ADC1_Init+0x98>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc4 <MX_ADC1_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <MX_ADC1_Init+0x98>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f56:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <MX_ADC1_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <MX_ADC1_Init+0x98>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f64:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <MX_ADC1_Init+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <MX_ADC1_Init+0x98>)
 8000f6c:	4a17      	ldr	r2, [pc, #92]	@ (8000fcc <MX_ADC1_Init+0xa0>)
 8000f6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f70:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <MX_ADC1_Init+0x98>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f76:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <MX_ADC1_Init+0x98>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_ADC1_Init+0x98>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_ADC1_Init+0x98>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f8a:	480e      	ldr	r0, [pc, #56]	@ (8000fc4 <MX_ADC1_Init+0x98>)
 8000f8c:	f000 fb42 	bl	8001614 <HAL_ADC_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f96:	f000 f991 	bl	80012bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4806      	ldr	r0, [pc, #24]	@ (8000fc4 <MX_ADC1_Init+0x98>)
 8000fac:	f000 fcf6 	bl	800199c <HAL_ADC_ConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fb6:	f000 f981 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000038 	.word	0x20000038
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	0f000001 	.word	0x0f000001

08000fd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b096      	sub	sp, #88	@ 0x58
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2220      	movs	r2, #32
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fc63 	bl	80038d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800100e:	4b4a      	ldr	r3, [pc, #296]	@ (8001138 <MX_TIM1_Init+0x168>)
 8001010:	4a4a      	ldr	r2, [pc, #296]	@ (800113c <MX_TIM1_Init+0x16c>)
 8001012:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001014:	4b48      	ldr	r3, [pc, #288]	@ (8001138 <MX_TIM1_Init+0x168>)
 8001016:	2253      	movs	r2, #83	@ 0x53
 8001018:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b47      	ldr	r3, [pc, #284]	@ (8001138 <MX_TIM1_Init+0x168>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001020:	4b45      	ldr	r3, [pc, #276]	@ (8001138 <MX_TIM1_Init+0x168>)
 8001022:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001026:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b43      	ldr	r3, [pc, #268]	@ (8001138 <MX_TIM1_Init+0x168>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800102e:	4b42      	ldr	r3, [pc, #264]	@ (8001138 <MX_TIM1_Init+0x168>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b40      	ldr	r3, [pc, #256]	@ (8001138 <MX_TIM1_Init+0x168>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800103a:	483f      	ldr	r0, [pc, #252]	@ (8001138 <MX_TIM1_Init+0x168>)
 800103c:	f001 fdd6 	bl	8002bec <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001046:	f000 f939 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001050:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001054:	4619      	mov	r1, r3
 8001056:	4838      	ldr	r0, [pc, #224]	@ (8001138 <MX_TIM1_Init+0x168>)
 8001058:	f001 ffe2 	bl	8003020 <HAL_TIM_ConfigClockSource>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001062:	f000 f92b 	bl	80012bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001066:	4834      	ldr	r0, [pc, #208]	@ (8001138 <MX_TIM1_Init+0x168>)
 8001068:	f001 fe0f 	bl	8002c8a <HAL_TIM_PWM_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001072:	f000 f923 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800107e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001082:	4619      	mov	r1, r3
 8001084:	482c      	ldr	r0, [pc, #176]	@ (8001138 <MX_TIM1_Init+0x168>)
 8001086:	f002 fb65 	bl	8003754 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001090:	f000 f914 	bl	80012bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001094:	2360      	movs	r3, #96	@ 0x60
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a0:	2300      	movs	r3, #0
 80010a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	481f      	ldr	r0, [pc, #124]	@ (8001138 <MX_TIM1_Init+0x168>)
 80010ba:	f001 feef 	bl	8002e9c <HAL_TIM_PWM_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010c4:	f000 f8fa 	bl	80012bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010cc:	2204      	movs	r2, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4819      	ldr	r0, [pc, #100]	@ (8001138 <MX_TIM1_Init+0x168>)
 80010d2:	f001 fee3 	bl	8002e9c <HAL_TIM_PWM_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80010dc:	f000 f8ee 	bl	80012bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e4:	2208      	movs	r2, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	4813      	ldr	r0, [pc, #76]	@ (8001138 <MX_TIM1_Init+0x168>)
 80010ea:	f001 fed7 	bl	8002e9c <HAL_TIM_PWM_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80010f4:	f000 f8e2 	bl	80012bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800110c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001110:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	4807      	ldr	r0, [pc, #28]	@ (8001138 <MX_TIM1_Init+0x168>)
 800111c:	f002 fb88 	bl	8003830 <HAL_TIMEx_ConfigBreakDeadTime>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001126:	f000 f8c9 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800112a:	4803      	ldr	r0, [pc, #12]	@ (8001138 <MX_TIM1_Init+0x168>)
 800112c:	f000 f95a 	bl	80013e4 <HAL_TIM_MspPostInit>

}
 8001130:	bf00      	nop
 8001132:	3758      	adds	r7, #88	@ 0x58
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000080 	.word	0x20000080
 800113c:	40010000 	.word	0x40010000

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b54      	ldr	r3, [pc, #336]	@ (80012ac <MX_GPIO_Init+0x16c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a53      	ldr	r2, [pc, #332]	@ (80012ac <MX_GPIO_Init+0x16c>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b51      	ldr	r3, [pc, #324]	@ (80012ac <MX_GPIO_Init+0x16c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b4d      	ldr	r3, [pc, #308]	@ (80012ac <MX_GPIO_Init+0x16c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a4c      	ldr	r2, [pc, #304]	@ (80012ac <MX_GPIO_Init+0x16c>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b4a      	ldr	r3, [pc, #296]	@ (80012ac <MX_GPIO_Init+0x16c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b46      	ldr	r3, [pc, #280]	@ (80012ac <MX_GPIO_Init+0x16c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a45      	ldr	r2, [pc, #276]	@ (80012ac <MX_GPIO_Init+0x16c>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b43      	ldr	r3, [pc, #268]	@ (80012ac <MX_GPIO_Init+0x16c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b3f      	ldr	r3, [pc, #252]	@ (80012ac <MX_GPIO_Init+0x16c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a3e      	ldr	r2, [pc, #248]	@ (80012ac <MX_GPIO_Init+0x16c>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b3c      	ldr	r3, [pc, #240]	@ (80012ac <MX_GPIO_Init+0x16c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC4 PC5 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 80011c6:	f44f 736c 	mov.w	r3, #944	@ 0x3b0
 80011ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4834      	ldr	r0, [pc, #208]	@ (80012b0 <MX_GPIO_Init+0x170>)
 80011de:	f000 ff1d 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80011e2:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	482e      	ldr	r0, [pc, #184]	@ (80012b4 <MX_GPIO_Init+0x174>)
 80011fa:	f000 ff0f 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011fe:	2340      	movs	r3, #64	@ 0x40
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001202:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4827      	ldr	r0, [pc, #156]	@ (80012b0 <MX_GPIO_Init+0x170>)
 8001214:	f000 ff02 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001218:	230f      	movs	r3, #15
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800121c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001222:	2302      	movs	r3, #2
 8001224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4822      	ldr	r0, [pc, #136]	@ (80012b8 <MX_GPIO_Init+0x178>)
 800122e:	f000 fef5 	bl	800201c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2006      	movs	r0, #6
 8001238:	f000 feb9 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800123c:	2006      	movs	r0, #6
 800123e:	f000 fed2 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2007      	movs	r0, #7
 8001248:	f000 feb1 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800124c:	2007      	movs	r0, #7
 800124e:	f000 feca 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2008      	movs	r0, #8
 8001258:	f000 fea9 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800125c:	2008      	movs	r0, #8
 800125e:	f000 fec2 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2009      	movs	r0, #9
 8001268:	f000 fea1 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800126c:	2009      	movs	r0, #9
 800126e:	f000 feba 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	200a      	movs	r0, #10
 8001278:	f000 fe99 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800127c:	200a      	movs	r0, #10
 800127e:	f000 feb2 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2017      	movs	r0, #23
 8001288:	f000 fe91 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800128c:	2017      	movs	r0, #23
 800128e:	f000 feaa 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2028      	movs	r0, #40	@ 0x28
 8001298:	f000 fe89 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800129c:	2028      	movs	r0, #40	@ 0x28
 800129e:	f000 fea2 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	@ 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020800 	.word	0x40020800
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40020c00 	.word	0x40020c00

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <Error_Handler+0x8>

080012c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <HAL_MspInit+0x4c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001314 <HAL_MspInit+0x4c>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <HAL_MspInit+0x4c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	4a08      	ldr	r2, [pc, #32]	@ (8001314 <HAL_MspInit+0x4c>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_MspInit+0x4c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001306:	2007      	movs	r0, #7
 8001308:	f000 fe46 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800

08001318 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a17      	ldr	r2, [pc, #92]	@ (8001394 <HAL_ADC_MspInit+0x7c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d127      	bne.n	800138a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <HAL_ADC_MspInit+0x80>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001342:	4a15      	ldr	r2, [pc, #84]	@ (8001398 <HAL_ADC_MspInit+0x80>)
 8001344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001348:	6453      	str	r3, [r2, #68]	@ 0x44
 800134a:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <HAL_ADC_MspInit+0x80>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <HAL_ADC_MspInit+0x80>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a0e      	ldr	r2, [pc, #56]	@ (8001398 <HAL_ADC_MspInit+0x80>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <HAL_ADC_MspInit+0x80>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001376:	2303      	movs	r3, #3
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <HAL_ADC_MspInit+0x84>)
 8001386:	f000 fe49 	bl	800201c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	@ 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40012000 	.word	0x40012000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000

080013a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0b      	ldr	r2, [pc, #44]	@ (80013dc <HAL_TIM_Base_MspInit+0x3c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d10d      	bne.n	80013ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <HAL_TIM_Base_MspInit+0x40>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	4a09      	ldr	r2, [pc, #36]	@ (80013e0 <HAL_TIM_Base_MspInit+0x40>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c2:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <HAL_TIM_Base_MspInit+0x40>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40010000 	.word	0x40010000
 80013e0:	40023800 	.word	0x40023800

080013e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a12      	ldr	r2, [pc, #72]	@ (800144c <HAL_TIM_MspPostInit+0x68>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d11e      	bne.n	8001444 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <HAL_TIM_MspPostInit+0x6c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a10      	ldr	r2, [pc, #64]	@ (8001450 <HAL_TIM_MspPostInit+0x6c>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <HAL_TIM_MspPostInit+0x6c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001422:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001426:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001434:	2301      	movs	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	4619      	mov	r1, r3
 800143e:	4805      	ldr	r0, [pc, #20]	@ (8001454 <HAL_TIM_MspPostInit+0x70>)
 8001440:	f000 fdec 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010000 	.word	0x40010000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <NMI_Handler+0x4>

08001460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <MemManage_Handler+0x4>

08001470 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <UsageFault_Handler+0x4>

08001480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ae:	f000 f891 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001514 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014e0:	f7ff ffea 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e4:	480c      	ldr	r0, [pc, #48]	@ (8001518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014e6:	490d      	ldr	r1, [pc, #52]	@ (800151c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150a:	f002 f9eb 	bl	80038e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7ff faa9 	bl	8000a64 <main>
  bx  lr    
 8001512:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001520:	08003964 	.word	0x08003964
  ldr r2, =_sbss
 8001524:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001528:	200000dc 	.word	0x200000dc

0800152c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC_IRQHandler>
	...

08001530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001534:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <HAL_Init+0x40>)
 800153a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800153e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001540:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <HAL_Init+0x40>)
 8001546:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800154a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	@ (8001570 <HAL_Init+0x40>)
 8001552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 fd1d 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff feb0 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023c00 	.word	0x40023c00

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fd35 	bl	8002002 <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 fcfd 	bl	8001fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	@ (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000010 	.word	0x20000010
 80015cc:	20000018 	.word	0x20000018
 80015d0:	20000014 	.word	0x20000014

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000018 	.word	0x20000018
 80015f8:	200000d8 	.word	0x200000d8

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	200000d8 	.word	0x200000d8

08001614 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e033      	b.n	8001692 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fe70 	bl	8001318 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b00      	cmp	r3, #0
 8001650:	d118      	bne.n	8001684 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800165a:	f023 0302 	bic.w	r3, r3, #2
 800165e:	f043 0202 	orr.w	r2, r3, #2
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 faca 	bl	8001c00 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	f023 0303 	bic.w	r3, r3, #3
 800167a:	f043 0201 	orr.w	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	641a      	str	r2, [r3, #64]	@ 0x40
 8001682:	e001      	b.n	8001688 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_ADC_Start+0x1a>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e097      	b.n	80017e6 <HAL_ADC_Start+0x14a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d018      	beq.n	80016fe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0201 	orr.w	r2, r2, #1
 80016da:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016dc:	4b45      	ldr	r3, [pc, #276]	@ (80017f4 <HAL_ADC_Start+0x158>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a45      	ldr	r2, [pc, #276]	@ (80017f8 <HAL_ADC_Start+0x15c>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0c9a      	lsrs	r2, r3, #18
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80016f0:	e002      	b.n	80016f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f9      	bne.n	80016f2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b01      	cmp	r3, #1
 800170a:	d15f      	bne.n	80017cc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001736:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800174a:	d106      	bne.n	800175a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001750:	f023 0206 	bic.w	r2, r3, #6
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	645a      	str	r2, [r3, #68]	@ 0x44
 8001758:	e002      	b.n	8001760 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001768:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <HAL_ADC_Start+0x160>)
 800176a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001774:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10f      	bne.n	80017a2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d129      	bne.n	80017e4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	e020      	b.n	80017e4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a16      	ldr	r2, [pc, #88]	@ (8001800 <HAL_ADC_Start+0x164>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d11b      	bne.n	80017e4 <HAL_ADC_Start+0x148>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d114      	bne.n	80017e4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	e00b      	b.n	80017e4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d0:	f043 0210 	orr.w	r2, r3, #16
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000010 	.word	0x20000010
 80017f8:	431bde83 	.word	0x431bde83
 80017fc:	40012300 	.word	0x40012300
 8001800:	40012000 	.word	0x40012000

08001804 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_ADC_Stop+0x16>
 8001816:	2302      	movs	r3, #2
 8001818:	e021      	b.n	800185e <HAL_ADC_Stop+0x5a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0201 	bic.w	r2, r2, #1
 8001830:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d109      	bne.n	8001854 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001886:	d113      	bne.n	80018b0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001896:	d10b      	bne.n	80018b0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	f043 0220 	orr.w	r2, r3, #32
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e063      	b.n	8001978 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b0:	f7ff fea4 	bl	80015fc <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018b6:	e021      	b.n	80018fc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018be:	d01d      	beq.n	80018fc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <HAL_ADC_PollForConversion+0x6c>
 80018c6:	f7ff fe99 	bl	80015fc <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d212      	bcs.n	80018fc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d00b      	beq.n	80018fc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	f043 0204 	orr.w	r2, r3, #4
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e03d      	b.n	8001978 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b02      	cmp	r3, #2
 8001908:	d1d6      	bne.n	80018b8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f06f 0212 	mvn.w	r2, #18
 8001912:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d123      	bne.n	8001976 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001932:	2b00      	cmp	r3, #0
 8001934:	d11f      	bne.n	8001976 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800194e:	2b00      	cmp	r3, #0
 8001950:	d111      	bne.n	8001976 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1c>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e113      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x244>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b09      	cmp	r3, #9
 80019c6:	d925      	bls.n	8001a14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68d9      	ldr	r1, [r3, #12]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	3b1e      	subs	r3, #30
 80019de:	2207      	movs	r2, #7
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43da      	mvns	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	400a      	ands	r2, r1
 80019ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68d9      	ldr	r1, [r3, #12]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	4603      	mov	r3, r0
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4403      	add	r3, r0
 8001a06:	3b1e      	subs	r3, #30
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	e022      	b.n	8001a5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6919      	ldr	r1, [r3, #16]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	2207      	movs	r2, #7
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	400a      	ands	r2, r1
 8001a36:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6919      	ldr	r1, [r3, #16]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4403      	add	r3, r0
 8001a50:	409a      	lsls	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d824      	bhi.n	8001aac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	3b05      	subs	r3, #5
 8001a74:	221f      	movs	r2, #31
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	400a      	ands	r2, r1
 8001a82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b05      	subs	r3, #5
 8001a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aaa:	e04c      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	d824      	bhi.n	8001afe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3b23      	subs	r3, #35	@ 0x23
 8001ac6:	221f      	movs	r2, #31
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43da      	mvns	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	3b23      	subs	r3, #35	@ 0x23
 8001af0:	fa00 f203 	lsl.w	r2, r0, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001afc:	e023      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3b41      	subs	r3, #65	@ 0x41
 8001b10:	221f      	movs	r2, #31
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b41      	subs	r3, #65	@ 0x41
 8001b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b46:	4b29      	ldr	r3, [pc, #164]	@ (8001bec <HAL_ADC_ConfigChannel+0x250>)
 8001b48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a28      	ldr	r2, [pc, #160]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x254>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d10f      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1d8>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b12      	cmp	r3, #18
 8001b5a:	d10b      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x254>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12b      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x23a>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1c      	ldr	r2, [pc, #112]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x258>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d003      	beq.n	8001b90 <HAL_ADC_ConfigChannel+0x1f4>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b11      	cmp	r3, #17
 8001b8e:	d122      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a11      	ldr	r2, [pc, #68]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x258>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d111      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x25c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a11      	ldr	r2, [pc, #68]	@ (8001bfc <HAL_ADC_ConfigChannel+0x260>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	0c9a      	lsrs	r2, r3, #18
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bc8:	e002      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f9      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40012300 	.word	0x40012300
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	10000012 	.word	0x10000012
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	431bde83 	.word	0x431bde83

08001c00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c08:	4b79      	ldr	r3, [pc, #484]	@ (8001df0 <ADC_Init+0x1f0>)
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	431a      	orrs	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6859      	ldr	r1, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	021a      	lsls	r2, r3, #8
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6899      	ldr	r1, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c92:	4a58      	ldr	r2, [pc, #352]	@ (8001df4 <ADC_Init+0x1f4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d022      	beq.n	8001cde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ca6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6899      	ldr	r1, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6899      	ldr	r1, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	e00f      	b.n	8001cfe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cfc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0202 	bic.w	r2, r2, #2
 8001d0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6899      	ldr	r1, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7e1b      	ldrb	r3, [r3, #24]
 8001d18:	005a      	lsls	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01b      	beq.n	8001d64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d3a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6859      	ldr	r1, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d56:	3b01      	subs	r3, #1
 8001d58:	035a      	lsls	r2, r3, #13
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	e007      	b.n	8001d74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d72:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	051a      	lsls	r2, r3, #20
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001da8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6899      	ldr	r1, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001db6:	025a      	lsls	r2, r3, #9
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6899      	ldr	r1, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	029a      	lsls	r2, r3, #10
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	609a      	str	r2, [r3, #8]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	40012300 	.word	0x40012300
 8001df4:	0f000001 	.word	0x0f000001

08001df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e14:	4013      	ands	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2a:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	60d3      	str	r3, [r2, #12]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e44:	4b04      	ldr	r3, [pc, #16]	@ (8001e58 <__NVIC_GetPriorityGrouping+0x18>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	f003 0307 	and.w	r3, r3, #7
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db0b      	blt.n	8001e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	4907      	ldr	r1, [pc, #28]	@ (8001e94 <__NVIC_EnableIRQ+0x38>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e100 	.word	0xe000e100

08001e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0a      	blt.n	8001ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	490c      	ldr	r1, [pc, #48]	@ (8001ee4 <__NVIC_SetPriority+0x4c>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec0:	e00a      	b.n	8001ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4908      	ldr	r1, [pc, #32]	@ (8001ee8 <__NVIC_SetPriority+0x50>)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3b04      	subs	r3, #4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	761a      	strb	r2, [r3, #24]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	@ 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f1c3 0307 	rsb	r3, r3, #7
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf28      	it	cs
 8001f0a:	2304      	movcs	r3, #4
 8001f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d902      	bls.n	8001f1c <NVIC_EncodePriority+0x30>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	e000      	b.n	8001f1e <NVIC_EncodePriority+0x32>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	4313      	orrs	r3, r2
         );
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	@ 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f7ff ff8e 	bl	8001e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff29 	bl	8001df8 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff3e 	bl	8001e40 <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff8e 	bl	8001eec <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff5d 	bl	8001e98 <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff31 	bl	8001e5c <__NVIC_EnableIRQ>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ffa2 	bl	8001f54 <SysTick_Config>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	@ 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	e159      	b.n	80022ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002038:	2201      	movs	r2, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	429a      	cmp	r2, r3
 8002052:	f040 8148 	bne.w	80022e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d005      	beq.n	800206e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206a:	2b02      	cmp	r3, #2
 800206c:	d130      	bne.n	80020d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	2203      	movs	r2, #3
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a4:	2201      	movs	r2, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 0201 	and.w	r2, r3, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d017      	beq.n	800210c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d123      	bne.n	8002160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	08da      	lsrs	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3208      	adds	r2, #8
 8002120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	08da      	lsrs	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3208      	adds	r2, #8
 800215a:	69b9      	ldr	r1, [r7, #24]
 800215c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0203 	and.w	r2, r3, #3
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80a2 	beq.w	80022e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b57      	ldr	r3, [pc, #348]	@ (8002304 <HAL_GPIO_Init+0x2e8>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	4a56      	ldr	r2, [pc, #344]	@ (8002304 <HAL_GPIO_Init+0x2e8>)
 80021ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b2:	4b54      	ldr	r3, [pc, #336]	@ (8002304 <HAL_GPIO_Init+0x2e8>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021be:	4a52      	ldr	r2, [pc, #328]	@ (8002308 <HAL_GPIO_Init+0x2ec>)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	220f      	movs	r2, #15
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a49      	ldr	r2, [pc, #292]	@ (800230c <HAL_GPIO_Init+0x2f0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d019      	beq.n	800221e <HAL_GPIO_Init+0x202>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a48      	ldr	r2, [pc, #288]	@ (8002310 <HAL_GPIO_Init+0x2f4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <HAL_GPIO_Init+0x1fe>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a47      	ldr	r2, [pc, #284]	@ (8002314 <HAL_GPIO_Init+0x2f8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00d      	beq.n	8002216 <HAL_GPIO_Init+0x1fa>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a46      	ldr	r2, [pc, #280]	@ (8002318 <HAL_GPIO_Init+0x2fc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d007      	beq.n	8002212 <HAL_GPIO_Init+0x1f6>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a45      	ldr	r2, [pc, #276]	@ (800231c <HAL_GPIO_Init+0x300>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <HAL_GPIO_Init+0x1f2>
 800220a:	2304      	movs	r3, #4
 800220c:	e008      	b.n	8002220 <HAL_GPIO_Init+0x204>
 800220e:	2307      	movs	r3, #7
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x204>
 8002212:	2303      	movs	r3, #3
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x204>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x204>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x204>
 800221e:	2300      	movs	r3, #0
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f002 0203 	and.w	r2, r2, #3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002230:	4935      	ldr	r1, [pc, #212]	@ (8002308 <HAL_GPIO_Init+0x2ec>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b38      	ldr	r3, [pc, #224]	@ (8002320 <HAL_GPIO_Init+0x304>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002262:	4a2f      	ldr	r2, [pc, #188]	@ (8002320 <HAL_GPIO_Init+0x304>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002268:	4b2d      	ldr	r3, [pc, #180]	@ (8002320 <HAL_GPIO_Init+0x304>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800228c:	4a24      	ldr	r2, [pc, #144]	@ (8002320 <HAL_GPIO_Init+0x304>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002292:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <HAL_GPIO_Init+0x304>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	f67f aea2 	bls.w	8002038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3724      	adds	r7, #36	@ 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40013800 	.word	0x40013800
 800230c:	40020000 	.word	0x40020000
 8002310:	40020400 	.word	0x40020400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40021000 	.word	0x40021000
 8002320:	40013c00 	.word	0x40013c00

08002324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e267      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d075      	beq.n	800242e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002342:	4b88      	ldr	r3, [pc, #544]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b04      	cmp	r3, #4
 800234c:	d00c      	beq.n	8002368 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234e:	4b85      	ldr	r3, [pc, #532]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002356:	2b08      	cmp	r3, #8
 8002358:	d112      	bne.n	8002380 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800235a:	4b82      	ldr	r3, [pc, #520]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002366:	d10b      	bne.n	8002380 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	4b7e      	ldr	r3, [pc, #504]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d05b      	beq.n	800242c <HAL_RCC_OscConfig+0x108>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d157      	bne.n	800242c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e242      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002388:	d106      	bne.n	8002398 <HAL_RCC_OscConfig+0x74>
 800238a:	4b76      	ldr	r3, [pc, #472]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a75      	ldr	r2, [pc, #468]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e01d      	b.n	80023d4 <HAL_RCC_OscConfig+0xb0>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0x98>
 80023a2:	4b70      	ldr	r3, [pc, #448]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 80023a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a6c      	ldr	r2, [pc, #432]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e00b      	b.n	80023d4 <HAL_RCC_OscConfig+0xb0>
 80023bc:	4b69      	ldr	r3, [pc, #420]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a68      	ldr	r2, [pc, #416]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 80023c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b66      	ldr	r3, [pc, #408]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a65      	ldr	r2, [pc, #404]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 80023ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff f90e 	bl	80015fc <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7ff f90a 	bl	80015fc <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	@ 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e207      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0xc0>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff f8fa 	bl	80015fc <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7ff f8f6 	bl	80015fc <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	@ 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1f3      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	4b51      	ldr	r3, [pc, #324]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0xe8>
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d063      	beq.n	8002502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800243a:	4b4a      	ldr	r3, [pc, #296]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002446:	4b47      	ldr	r3, [pc, #284]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800244e:	2b08      	cmp	r3, #8
 8002450:	d11c      	bne.n	800248c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002452:	4b44      	ldr	r3, [pc, #272]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d116      	bne.n	800248c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	4b41      	ldr	r3, [pc, #260]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_RCC_OscConfig+0x152>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d001      	beq.n	8002476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e1c7      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002476:	4b3b      	ldr	r3, [pc, #236]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4937      	ldr	r1, [pc, #220]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	e03a      	b.n	8002502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d020      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002494:	4b34      	ldr	r3, [pc, #208]	@ (8002568 <HAL_RCC_OscConfig+0x244>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7ff f8af 	bl	80015fc <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a2:	f7ff f8ab 	bl	80015fc <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e1a8      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	4b28      	ldr	r3, [pc, #160]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4925      	ldr	r1, [pc, #148]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
 80024d4:	e015      	b.n	8002502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d6:	4b24      	ldr	r3, [pc, #144]	@ (8002568 <HAL_RCC_OscConfig+0x244>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7ff f88e 	bl	80015fc <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e4:	f7ff f88a 	bl	80015fc <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e187      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d036      	beq.n	800257c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d016      	beq.n	8002544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002516:	4b15      	ldr	r3, [pc, #84]	@ (800256c <HAL_RCC_OscConfig+0x248>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7ff f86e 	bl	80015fc <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002524:	f7ff f86a 	bl	80015fc <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e167      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <HAL_RCC_OscConfig+0x240>)
 8002538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x200>
 8002542:	e01b      	b.n	800257c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002544:	4b09      	ldr	r3, [pc, #36]	@ (800256c <HAL_RCC_OscConfig+0x248>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254a:	f7ff f857 	bl	80015fc <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	e00e      	b.n	8002570 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002552:	f7ff f853 	bl	80015fc <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d907      	bls.n	8002570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e150      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
 8002564:	40023800 	.word	0x40023800
 8002568:	42470000 	.word	0x42470000
 800256c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002570:	4b88      	ldr	r3, [pc, #544]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 8002572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1ea      	bne.n	8002552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8097 	beq.w	80026b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258e:	4b81      	ldr	r3, [pc, #516]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10f      	bne.n	80025ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	4b7d      	ldr	r3, [pc, #500]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b6:	2301      	movs	r3, #1
 80025b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ba:	4b77      	ldr	r3, [pc, #476]	@ (8002798 <HAL_RCC_OscConfig+0x474>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d118      	bne.n	80025f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c6:	4b74      	ldr	r3, [pc, #464]	@ (8002798 <HAL_RCC_OscConfig+0x474>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a73      	ldr	r2, [pc, #460]	@ (8002798 <HAL_RCC_OscConfig+0x474>)
 80025cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d2:	f7ff f813 	bl	80015fc <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025da:	f7ff f80f 	bl	80015fc <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e10c      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002798 <HAL_RCC_OscConfig+0x474>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d106      	bne.n	800260e <HAL_RCC_OscConfig+0x2ea>
 8002600:	4b64      	ldr	r3, [pc, #400]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002604:	4a63      	ldr	r2, [pc, #396]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6713      	str	r3, [r2, #112]	@ 0x70
 800260c:	e01c      	b.n	8002648 <HAL_RCC_OscConfig+0x324>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b05      	cmp	r3, #5
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x30c>
 8002616:	4b5f      	ldr	r3, [pc, #380]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 8002618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261a:	4a5e      	ldr	r2, [pc, #376]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 800261c:	f043 0304 	orr.w	r3, r3, #4
 8002620:	6713      	str	r3, [r2, #112]	@ 0x70
 8002622:	4b5c      	ldr	r3, [pc, #368]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002626:	4a5b      	ldr	r2, [pc, #364]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6713      	str	r3, [r2, #112]	@ 0x70
 800262e:	e00b      	b.n	8002648 <HAL_RCC_OscConfig+0x324>
 8002630:	4b58      	ldr	r3, [pc, #352]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002634:	4a57      	ldr	r2, [pc, #348]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	6713      	str	r3, [r2, #112]	@ 0x70
 800263c:	4b55      	ldr	r3, [pc, #340]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002640:	4a54      	ldr	r2, [pc, #336]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 8002642:	f023 0304 	bic.w	r3, r3, #4
 8002646:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d015      	beq.n	800267c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7fe ffd4 	bl	80015fc <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002656:	e00a      	b.n	800266e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002658:	f7fe ffd0 	bl	80015fc <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e0cb      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266e:	4b49      	ldr	r3, [pc, #292]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0ee      	beq.n	8002658 <HAL_RCC_OscConfig+0x334>
 800267a:	e014      	b.n	80026a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267c:	f7fe ffbe 	bl	80015fc <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002682:	e00a      	b.n	800269a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002684:	f7fe ffba 	bl	80015fc <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e0b5      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269a:	4b3e      	ldr	r3, [pc, #248]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ee      	bne.n	8002684 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ac:	4b39      	ldr	r3, [pc, #228]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	4a38      	ldr	r2, [pc, #224]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 80026b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80a1 	beq.w	8002804 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026c2:	4b34      	ldr	r3, [pc, #208]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d05c      	beq.n	8002788 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d141      	bne.n	800275a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d6:	4b31      	ldr	r3, [pc, #196]	@ (800279c <HAL_RCC_OscConfig+0x478>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe ff8e 	bl	80015fc <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e4:	f7fe ff8a 	bl	80015fc <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e087      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f6:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002710:	019b      	lsls	r3, r3, #6
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	3b01      	subs	r3, #1
 800271c:	041b      	lsls	r3, r3, #16
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	491b      	ldr	r1, [pc, #108]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800272c:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_RCC_OscConfig+0x478>)
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002732:	f7fe ff63 	bl	80015fc <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273a:	f7fe ff5f 	bl	80015fc <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e05c      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274c:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x416>
 8002758:	e054      	b.n	8002804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275a:	4b10      	ldr	r3, [pc, #64]	@ (800279c <HAL_RCC_OscConfig+0x478>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7fe ff4c 	bl	80015fc <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe ff48 	bl	80015fc <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e045      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <HAL_RCC_OscConfig+0x470>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x444>
 8002786:	e03d      	b.n	8002804 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e038      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
 8002794:	40023800 	.word	0x40023800
 8002798:	40007000 	.word	0x40007000
 800279c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <HAL_RCC_OscConfig+0x4ec>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d028      	beq.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d121      	bne.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d11a      	bne.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d8:	4293      	cmp	r3, r2
 80027da:	d111      	bne.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	3b01      	subs	r3, #1
 80027ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800

08002814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0cc      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002828:	4b68      	ldr	r3, [pc, #416]	@ (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d90c      	bls.n	8002850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b65      	ldr	r3, [pc, #404]	@ (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b63      	ldr	r3, [pc, #396]	@ (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0b8      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d020      	beq.n	800289e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002868:	4b59      	ldr	r3, [pc, #356]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a58      	ldr	r2, [pc, #352]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002872:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002880:	4b53      	ldr	r3, [pc, #332]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4a52      	ldr	r2, [pc, #328]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800288a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288c:	4b50      	ldr	r3, [pc, #320]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	494d      	ldr	r1, [pc, #308]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d044      	beq.n	8002934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4b47      	ldr	r3, [pc, #284]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d119      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e07f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d003      	beq.n	80028d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d2:	4b3f      	ldr	r3, [pc, #252]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e06f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e2:	4b3b      	ldr	r3, [pc, #236]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e067      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f2:	4b37      	ldr	r3, [pc, #220]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f023 0203 	bic.w	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4934      	ldr	r1, [pc, #208]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	4313      	orrs	r3, r2
 8002902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002904:	f7fe fe7a 	bl	80015fc <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	e00a      	b.n	8002922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290c:	f7fe fe76 	bl	80015fc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e04f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	4b2b      	ldr	r3, [pc, #172]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 020c 	and.w	r2, r3, #12
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	429a      	cmp	r2, r3
 8002932:	d1eb      	bne.n	800290c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002934:	4b25      	ldr	r3, [pc, #148]	@ (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d20c      	bcs.n	800295c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b22      	ldr	r3, [pc, #136]	@ (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b20      	ldr	r3, [pc, #128]	@ (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e032      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002968:	4b19      	ldr	r3, [pc, #100]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4916      	ldr	r1, [pc, #88]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002986:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	490e      	ldr	r1, [pc, #56]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299a:	f000 f821 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800299e:	4602      	mov	r2, r0
 80029a0:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	490a      	ldr	r1, [pc, #40]	@ (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 80029ac:	5ccb      	ldrb	r3, [r1, r3]
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	4a09      	ldr	r2, [pc, #36]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029b6:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fdda 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023c00 	.word	0x40023c00
 80029d0:	40023800 	.word	0x40023800
 80029d4:	08003944 	.word	0x08003944
 80029d8:	20000010 	.word	0x20000010
 80029dc:	20000014 	.word	0x20000014

080029e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029e4:	b094      	sub	sp, #80	@ 0x50
 80029e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029f8:	4b79      	ldr	r3, [pc, #484]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d00d      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x40>
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	f200 80e1 	bhi.w	8002bcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x34>
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a12:	e0db      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b73      	ldr	r3, [pc, #460]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a18:	e0db      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a1a:	4b73      	ldr	r3, [pc, #460]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a1e:	e0d8      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a20:	4b6f      	ldr	r3, [pc, #444]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d063      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a36:	4b6a      	ldr	r3, [pc, #424]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	099b      	lsrs	r3, r3, #6
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a52:	4622      	mov	r2, r4
 8002a54:	462b      	mov	r3, r5
 8002a56:	f04f 0000 	mov.w	r0, #0
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	0159      	lsls	r1, r3, #5
 8002a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a64:	0150      	lsls	r0, r2, #5
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	1a51      	subs	r1, r2, r1
 8002a6e:	6139      	str	r1, [r7, #16]
 8002a70:	4629      	mov	r1, r5
 8002a72:	eb63 0301 	sbc.w	r3, r3, r1
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a84:	4659      	mov	r1, fp
 8002a86:	018b      	lsls	r3, r1, #6
 8002a88:	4651      	mov	r1, sl
 8002a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a8e:	4651      	mov	r1, sl
 8002a90:	018a      	lsls	r2, r1, #6
 8002a92:	4651      	mov	r1, sl
 8002a94:	ebb2 0801 	subs.w	r8, r2, r1
 8002a98:	4659      	mov	r1, fp
 8002a9a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ab2:	4690      	mov	r8, r2
 8002ab4:	4699      	mov	r9, r3
 8002ab6:	4623      	mov	r3, r4
 8002ab8:	eb18 0303 	adds.w	r3, r8, r3
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	462b      	mov	r3, r5
 8002ac0:	eb49 0303 	adc.w	r3, r9, r3
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	024b      	lsls	r3, r1, #9
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002adc:	4621      	mov	r1, r4
 8002ade:	024a      	lsls	r2, r1, #9
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002aec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002af0:	f7fd fdb6 	bl	8000660 <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4613      	mov	r3, r2
 8002afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002afc:	e058      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afe:	4b38      	ldr	r3, [pc, #224]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	2200      	movs	r2, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	4611      	mov	r1, r2
 8002b0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b0e:	623b      	str	r3, [r7, #32]
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b18:	4642      	mov	r2, r8
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	f04f 0000 	mov.w	r0, #0
 8002b20:	f04f 0100 	mov.w	r1, #0
 8002b24:	0159      	lsls	r1, r3, #5
 8002b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b2a:	0150      	lsls	r0, r2, #5
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4641      	mov	r1, r8
 8002b32:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b36:	4649      	mov	r1, r9
 8002b38:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b50:	ebb2 040a 	subs.w	r4, r2, sl
 8002b54:	eb63 050b 	sbc.w	r5, r3, fp
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	00eb      	lsls	r3, r5, #3
 8002b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b66:	00e2      	lsls	r2, r4, #3
 8002b68:	4614      	mov	r4, r2
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	4643      	mov	r3, r8
 8002b6e:	18e3      	adds	r3, r4, r3
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	464b      	mov	r3, r9
 8002b74:	eb45 0303 	adc.w	r3, r5, r3
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b86:	4629      	mov	r1, r5
 8002b88:	028b      	lsls	r3, r1, #10
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b90:	4621      	mov	r1, r4
 8002b92:	028a      	lsls	r2, r1, #10
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	61fa      	str	r2, [r7, #28]
 8002ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba4:	f7fd fd5c 	bl	8000660 <__aeabi_uldivmod>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4613      	mov	r3, r2
 8002bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002bc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bca:	e002      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bcc:	4b05      	ldr	r3, [pc, #20]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3750      	adds	r7, #80	@ 0x50
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	00f42400 	.word	0x00f42400
 8002be8:	007a1200 	.word	0x007a1200

08002bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e041      	b.n	8002c82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe fbc4 	bl	80013a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3304      	adds	r3, #4
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f000 fac0 	bl	80031b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e041      	b.n	8002d20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d106      	bne.n	8002cb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f839 	bl	8002d28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4610      	mov	r0, r2
 8002cca:	f000 fa71 	bl	80031b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <HAL_TIM_PWM_Start+0x24>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e022      	b.n	8002da6 <HAL_TIM_PWM_Start+0x6a>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d109      	bne.n	8002d7a <HAL_TIM_PWM_Start+0x3e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	bf14      	ite	ne
 8002d72:	2301      	movne	r3, #1
 8002d74:	2300      	moveq	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	e015      	b.n	8002da6 <HAL_TIM_PWM_Start+0x6a>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d109      	bne.n	8002d94 <HAL_TIM_PWM_Start+0x58>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	bf14      	ite	ne
 8002d8c:	2301      	movne	r3, #1
 8002d8e:	2300      	moveq	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e008      	b.n	8002da6 <HAL_TIM_PWM_Start+0x6a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	bf14      	ite	ne
 8002da0:	2301      	movne	r3, #1
 8002da2:	2300      	moveq	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e068      	b.n	8002e80 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <HAL_TIM_PWM_Start+0x82>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dbc:	e013      	b.n	8002de6 <HAL_TIM_PWM_Start+0xaa>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d104      	bne.n	8002dce <HAL_TIM_PWM_Start+0x92>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dcc:	e00b      	b.n	8002de6 <HAL_TIM_PWM_Start+0xaa>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d104      	bne.n	8002dde <HAL_TIM_PWM_Start+0xa2>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ddc:	e003      	b.n	8002de6 <HAL_TIM_PWM_Start+0xaa>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2201      	movs	r2, #1
 8002dec:	6839      	ldr	r1, [r7, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fc8a 	bl	8003708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a23      	ldr	r2, [pc, #140]	@ (8002e88 <HAL_TIM_PWM_Start+0x14c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d107      	bne.n	8002e0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1d      	ldr	r2, [pc, #116]	@ (8002e88 <HAL_TIM_PWM_Start+0x14c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d018      	beq.n	8002e4a <HAL_TIM_PWM_Start+0x10e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e20:	d013      	beq.n	8002e4a <HAL_TIM_PWM_Start+0x10e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a19      	ldr	r2, [pc, #100]	@ (8002e8c <HAL_TIM_PWM_Start+0x150>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00e      	beq.n	8002e4a <HAL_TIM_PWM_Start+0x10e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a17      	ldr	r2, [pc, #92]	@ (8002e90 <HAL_TIM_PWM_Start+0x154>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_TIM_PWM_Start+0x10e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a16      	ldr	r2, [pc, #88]	@ (8002e94 <HAL_TIM_PWM_Start+0x158>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d004      	beq.n	8002e4a <HAL_TIM_PWM_Start+0x10e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a14      	ldr	r2, [pc, #80]	@ (8002e98 <HAL_TIM_PWM_Start+0x15c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d111      	bne.n	8002e6e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d010      	beq.n	8002e7e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6c:	e007      	b.n	8002e7e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0201 	orr.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	40000400 	.word	0x40000400
 8002e90:	40000800 	.word	0x40000800
 8002e94:	40000c00 	.word	0x40000c00
 8002e98:	40014000 	.word	0x40014000

08002e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e0ae      	b.n	8003018 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b0c      	cmp	r3, #12
 8002ec6:	f200 809f 	bhi.w	8003008 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002eca:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed0:	08002f05 	.word	0x08002f05
 8002ed4:	08003009 	.word	0x08003009
 8002ed8:	08003009 	.word	0x08003009
 8002edc:	08003009 	.word	0x08003009
 8002ee0:	08002f45 	.word	0x08002f45
 8002ee4:	08003009 	.word	0x08003009
 8002ee8:	08003009 	.word	0x08003009
 8002eec:	08003009 	.word	0x08003009
 8002ef0:	08002f87 	.word	0x08002f87
 8002ef4:	08003009 	.word	0x08003009
 8002ef8:	08003009 	.word	0x08003009
 8002efc:	08003009 	.word	0x08003009
 8002f00:	08002fc7 	.word	0x08002fc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f9d6 	bl	80032bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0208 	orr.w	r2, r2, #8
 8002f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0204 	bic.w	r2, r2, #4
 8002f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6999      	ldr	r1, [r3, #24]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	619a      	str	r2, [r3, #24]
      break;
 8002f42:	e064      	b.n	800300e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fa1c 	bl	8003388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6999      	ldr	r1, [r3, #24]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	021a      	lsls	r2, r3, #8
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	619a      	str	r2, [r3, #24]
      break;
 8002f84:	e043      	b.n	800300e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fa67 	bl	8003460 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0208 	orr.w	r2, r2, #8
 8002fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0204 	bic.w	r2, r2, #4
 8002fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69d9      	ldr	r1, [r3, #28]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	61da      	str	r2, [r3, #28]
      break;
 8002fc4:	e023      	b.n	800300e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fab1 	bl	8003534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69d9      	ldr	r1, [r3, #28]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	021a      	lsls	r2, r3, #8
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	61da      	str	r2, [r3, #28]
      break;
 8003006:	e002      	b.n	800300e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	75fb      	strb	r3, [r7, #23]
      break;
 800300c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003016:	7dfb      	ldrb	r3, [r7, #23]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_TIM_ConfigClockSource+0x1c>
 8003038:	2302      	movs	r3, #2
 800303a:	e0b4      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x186>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800305a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003062:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003074:	d03e      	beq.n	80030f4 <HAL_TIM_ConfigClockSource+0xd4>
 8003076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800307a:	f200 8087 	bhi.w	800318c <HAL_TIM_ConfigClockSource+0x16c>
 800307e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003082:	f000 8086 	beq.w	8003192 <HAL_TIM_ConfigClockSource+0x172>
 8003086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800308a:	d87f      	bhi.n	800318c <HAL_TIM_ConfigClockSource+0x16c>
 800308c:	2b70      	cmp	r3, #112	@ 0x70
 800308e:	d01a      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0xa6>
 8003090:	2b70      	cmp	r3, #112	@ 0x70
 8003092:	d87b      	bhi.n	800318c <HAL_TIM_ConfigClockSource+0x16c>
 8003094:	2b60      	cmp	r3, #96	@ 0x60
 8003096:	d050      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x11a>
 8003098:	2b60      	cmp	r3, #96	@ 0x60
 800309a:	d877      	bhi.n	800318c <HAL_TIM_ConfigClockSource+0x16c>
 800309c:	2b50      	cmp	r3, #80	@ 0x50
 800309e:	d03c      	beq.n	800311a <HAL_TIM_ConfigClockSource+0xfa>
 80030a0:	2b50      	cmp	r3, #80	@ 0x50
 80030a2:	d873      	bhi.n	800318c <HAL_TIM_ConfigClockSource+0x16c>
 80030a4:	2b40      	cmp	r3, #64	@ 0x40
 80030a6:	d058      	beq.n	800315a <HAL_TIM_ConfigClockSource+0x13a>
 80030a8:	2b40      	cmp	r3, #64	@ 0x40
 80030aa:	d86f      	bhi.n	800318c <HAL_TIM_ConfigClockSource+0x16c>
 80030ac:	2b30      	cmp	r3, #48	@ 0x30
 80030ae:	d064      	beq.n	800317a <HAL_TIM_ConfigClockSource+0x15a>
 80030b0:	2b30      	cmp	r3, #48	@ 0x30
 80030b2:	d86b      	bhi.n	800318c <HAL_TIM_ConfigClockSource+0x16c>
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d060      	beq.n	800317a <HAL_TIM_ConfigClockSource+0x15a>
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d867      	bhi.n	800318c <HAL_TIM_ConfigClockSource+0x16c>
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d05c      	beq.n	800317a <HAL_TIM_ConfigClockSource+0x15a>
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	d05a      	beq.n	800317a <HAL_TIM_ConfigClockSource+0x15a>
 80030c4:	e062      	b.n	800318c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030d6:	f000 faf7 	bl	80036c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	609a      	str	r2, [r3, #8]
      break;
 80030f2:	e04f      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003104:	f000 fae0 	bl	80036c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003116:	609a      	str	r2, [r3, #8]
      break;
 8003118:	e03c      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003126:	461a      	mov	r2, r3
 8003128:	f000 fa54 	bl	80035d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2150      	movs	r1, #80	@ 0x50
 8003132:	4618      	mov	r0, r3
 8003134:	f000 faad 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 8003138:	e02c      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003146:	461a      	mov	r2, r3
 8003148:	f000 fa73 	bl	8003632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2160      	movs	r1, #96	@ 0x60
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fa9d 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 8003158:	e01c      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003166:	461a      	mov	r2, r3
 8003168:	f000 fa34 	bl	80035d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2140      	movs	r1, #64	@ 0x40
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fa8d 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 8003178:	e00c      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4619      	mov	r1, r3
 8003184:	4610      	mov	r0, r2
 8003186:	f000 fa84 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 800318a:	e003      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
      break;
 8003190:	e000      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003192:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a37      	ldr	r2, [pc, #220]	@ (80032a0 <TIM_Base_SetConfig+0xf0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00f      	beq.n	80031e8 <TIM_Base_SetConfig+0x38>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ce:	d00b      	beq.n	80031e8 <TIM_Base_SetConfig+0x38>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a34      	ldr	r2, [pc, #208]	@ (80032a4 <TIM_Base_SetConfig+0xf4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d007      	beq.n	80031e8 <TIM_Base_SetConfig+0x38>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a33      	ldr	r2, [pc, #204]	@ (80032a8 <TIM_Base_SetConfig+0xf8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <TIM_Base_SetConfig+0x38>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a32      	ldr	r2, [pc, #200]	@ (80032ac <TIM_Base_SetConfig+0xfc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d108      	bne.n	80031fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a28      	ldr	r2, [pc, #160]	@ (80032a0 <TIM_Base_SetConfig+0xf0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01b      	beq.n	800323a <TIM_Base_SetConfig+0x8a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003208:	d017      	beq.n	800323a <TIM_Base_SetConfig+0x8a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a25      	ldr	r2, [pc, #148]	@ (80032a4 <TIM_Base_SetConfig+0xf4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d013      	beq.n	800323a <TIM_Base_SetConfig+0x8a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a24      	ldr	r2, [pc, #144]	@ (80032a8 <TIM_Base_SetConfig+0xf8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00f      	beq.n	800323a <TIM_Base_SetConfig+0x8a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a23      	ldr	r2, [pc, #140]	@ (80032ac <TIM_Base_SetConfig+0xfc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00b      	beq.n	800323a <TIM_Base_SetConfig+0x8a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a22      	ldr	r2, [pc, #136]	@ (80032b0 <TIM_Base_SetConfig+0x100>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d007      	beq.n	800323a <TIM_Base_SetConfig+0x8a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a21      	ldr	r2, [pc, #132]	@ (80032b4 <TIM_Base_SetConfig+0x104>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d003      	beq.n	800323a <TIM_Base_SetConfig+0x8a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a20      	ldr	r2, [pc, #128]	@ (80032b8 <TIM_Base_SetConfig+0x108>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d108      	bne.n	800324c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a0c      	ldr	r2, [pc, #48]	@ (80032a0 <TIM_Base_SetConfig+0xf0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d103      	bne.n	800327a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f043 0204 	orr.w	r2, r3, #4
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	601a      	str	r2, [r3, #0]
}
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40010000 	.word	0x40010000
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40000800 	.word	0x40000800
 80032ac:	40000c00 	.word	0x40000c00
 80032b0:	40014000 	.word	0x40014000
 80032b4:	40014400 	.word	0x40014400
 80032b8:	40014800 	.word	0x40014800

080032bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	f023 0201 	bic.w	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f023 0302 	bic.w	r3, r3, #2
 8003304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a1c      	ldr	r2, [pc, #112]	@ (8003384 <TIM_OC1_SetConfig+0xc8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d10c      	bne.n	8003332 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0308 	bic.w	r3, r3, #8
 800331e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a13      	ldr	r2, [pc, #76]	@ (8003384 <TIM_OC1_SetConfig+0xc8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d111      	bne.n	800335e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	621a      	str	r2, [r3, #32]
}
 8003378:	bf00      	nop
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40010000 	.word	0x40010000

08003388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f023 0210 	bic.w	r2, r3, #16
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0320 	bic.w	r3, r3, #32
 80033d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a1e      	ldr	r2, [pc, #120]	@ (800345c <TIM_OC2_SetConfig+0xd4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10d      	bne.n	8003404 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003402:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a15      	ldr	r2, [pc, #84]	@ (800345c <TIM_OC2_SetConfig+0xd4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d113      	bne.n	8003434 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800341a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40010000 	.word	0x40010000

08003460 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800348e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003530 <TIM_OC3_SetConfig+0xd0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d10d      	bne.n	80034da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a14      	ldr	r2, [pc, #80]	@ (8003530 <TIM_OC3_SetConfig+0xd0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d113      	bne.n	800350a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	621a      	str	r2, [r3, #32]
}
 8003524:	bf00      	nop
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	40010000 	.word	0x40010000

08003534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800356a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800357e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	031b      	lsls	r3, r3, #12
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a10      	ldr	r2, [pc, #64]	@ (80035d0 <TIM_OC4_SetConfig+0x9c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d109      	bne.n	80035a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800359a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	019b      	lsls	r3, r3, #6
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	621a      	str	r2, [r3, #32]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40010000 	.word	0x40010000

080035d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0201 	bic.w	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 030a 	bic.w	r3, r3, #10
 8003610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003632:	b480      	push	{r7}
 8003634:	b087      	sub	sp, #28
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f023 0210 	bic.w	r2, r3, #16
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800365c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	031b      	lsls	r3, r3, #12
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800366e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f043 0307 	orr.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	609a      	str	r2, [r3, #8]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	021a      	lsls	r2, r3, #8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	609a      	str	r2, [r3, #8]
}
 80036fc:	bf00      	nop
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	2201      	movs	r2, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1a      	ldr	r2, [r3, #32]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	43db      	mvns	r3, r3
 800372a:	401a      	ands	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a1a      	ldr	r2, [r3, #32]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	fa01 f303 	lsl.w	r3, r1, r3
 8003740:	431a      	orrs	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	621a      	str	r2, [r3, #32]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003768:	2302      	movs	r3, #2
 800376a:	e050      	b.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1c      	ldr	r2, [pc, #112]	@ (800381c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d018      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b8:	d013      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a18      	ldr	r2, [pc, #96]	@ (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a16      	ldr	r2, [pc, #88]	@ (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d009      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a15      	ldr	r2, [pc, #84]	@ (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a13      	ldr	r2, [pc, #76]	@ (800382c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d10c      	bne.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40010000 	.word	0x40010000
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800
 8003828:	40000c00 	.word	0x40000c00
 800382c:	40014000 	.word	0x40014000

08003830 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003848:	2302      	movs	r3, #2
 800384a:	e03d      	b.n	80038c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <memset>:
 80038d4:	4402      	add	r2, r0
 80038d6:	4603      	mov	r3, r0
 80038d8:	4293      	cmp	r3, r2
 80038da:	d100      	bne.n	80038de <memset+0xa>
 80038dc:	4770      	bx	lr
 80038de:	f803 1b01 	strb.w	r1, [r3], #1
 80038e2:	e7f9      	b.n	80038d8 <memset+0x4>

080038e4 <__libc_init_array>:
 80038e4:	b570      	push	{r4, r5, r6, lr}
 80038e6:	4d0d      	ldr	r5, [pc, #52]	@ (800391c <__libc_init_array+0x38>)
 80038e8:	4c0d      	ldr	r4, [pc, #52]	@ (8003920 <__libc_init_array+0x3c>)
 80038ea:	1b64      	subs	r4, r4, r5
 80038ec:	10a4      	asrs	r4, r4, #2
 80038ee:	2600      	movs	r6, #0
 80038f0:	42a6      	cmp	r6, r4
 80038f2:	d109      	bne.n	8003908 <__libc_init_array+0x24>
 80038f4:	4d0b      	ldr	r5, [pc, #44]	@ (8003924 <__libc_init_array+0x40>)
 80038f6:	4c0c      	ldr	r4, [pc, #48]	@ (8003928 <__libc_init_array+0x44>)
 80038f8:	f000 f818 	bl	800392c <_init>
 80038fc:	1b64      	subs	r4, r4, r5
 80038fe:	10a4      	asrs	r4, r4, #2
 8003900:	2600      	movs	r6, #0
 8003902:	42a6      	cmp	r6, r4
 8003904:	d105      	bne.n	8003912 <__libc_init_array+0x2e>
 8003906:	bd70      	pop	{r4, r5, r6, pc}
 8003908:	f855 3b04 	ldr.w	r3, [r5], #4
 800390c:	4798      	blx	r3
 800390e:	3601      	adds	r6, #1
 8003910:	e7ee      	b.n	80038f0 <__libc_init_array+0xc>
 8003912:	f855 3b04 	ldr.w	r3, [r5], #4
 8003916:	4798      	blx	r3
 8003918:	3601      	adds	r6, #1
 800391a:	e7f2      	b.n	8003902 <__libc_init_array+0x1e>
 800391c:	0800395c 	.word	0x0800395c
 8003920:	0800395c 	.word	0x0800395c
 8003924:	0800395c 	.word	0x0800395c
 8003928:	08003960 	.word	0x08003960

0800392c <_init>:
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	bf00      	nop
 8003930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003932:	bc08      	pop	{r3}
 8003934:	469e      	mov	lr, r3
 8003936:	4770      	bx	lr

08003938 <_fini>:
 8003938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393a:	bf00      	nop
 800393c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393e:	bc08      	pop	{r3}
 8003940:	469e      	mov	lr, r3
 8003942:	4770      	bx	lr
